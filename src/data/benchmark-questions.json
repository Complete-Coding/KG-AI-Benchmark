{
  "generatedAt": "2025-10-25T07:28:10.171Z",
  "total": 50,
  "stats": {
    "countsByType": {
      "MCQ": 50
    }
  },
  "questions": [
    {
      "questionId": 3949,
      "type": "MCQ",
      "difficulty": "ADVANCED",
      "topology": {
        "subjectId": "68da217e31f60703d61408e4",
        "topicId": "68da22bc31f60703d6169971",
        "subtopicId": "68da338e5e8ee4416b6fbb51"
      },
      "content": {
        "questionText": "Consider a network with 6 routers R1 to R6 connected with links having weights as shown in the following diagram  Suppose the weights of all unused links in the previous question are changed to 2 and the distance vector algorithm is used again until all routing tables stabilize. How many links will now remain unused?",
        "options": [
          {
            "id": 0,
            "text": "0",
            "feedback": "Correct — after reducing the weights of the previously unused links to 2, recomputing shortest paths shows that every link becomes part of at least one shortest-path route. Therefore no link remains unused."
          },
          {
            "id": 1,
            "text": "1",
            "feedback": "Incorrect — lowering the unused-link weights to 2 makes those links attractive enough to be chosen on shortest paths, so you should not expect one link to remain unused in the recomputed routing."
          },
          {
            "id": 2,
            "text": "2",
            "feedback": "Incorrect — with the decreased weights the alternative (previously unused) links become part of shortest paths, so two links remaining unused does not match the recomputed routing."
          },
          {
            "id": 3,
            "text": "3",
            "feedback": "Incorrect — three unused links would imply multiple heavy links remain strictly worse than alternative routes even after their weights are lowered to 2; recomputing the distance vectors shows that is not true."
          }
        ]
      },
      "answer": {
        "correctOption": 1,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key insight:  when you reduce the weights of links that were previously unused to 2, those links typically become part of cheaper routes. Recompute shortest (distance-vector) routes from each router and check whether any link is never used as a next hop to any destination. Steps (brief): 1) Identify the links that were unused in the previous configuration and set their weights to 2. 2) Run the distance-vector updates (or compute shortest-path distances) from each router to all destinations, using the new weights. 3) For each link, check whether it is used as a next hop by at least one router on the shortest route to some destination. Conclusion: After lowering the previously-unused links to weight 2 and recomputing routing, every link becomes part of some shortest-path route. So 0 links remain unused.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3948,
      "type": "MCQ",
      "difficulty": "ADVANCED",
      "topology": {
        "subjectId": "68da217e31f60703d61408e4",
        "topicId": "68da22bc31f60703d6169971",
        "subtopicId": "68da338e5e8ee4416b6fbb51"
      },
      "content": {
        "questionText": "Consider a network with 6 routers R1 to R6 connected with links having weights as shown in the following diagram  All the routers use the distance vector based routing algorithm to update their routing tables. Each router starts with its routing table initialized to contain an entry for each neighbour with the weight of the respective connecting link. After all the routing tables stabilize, how many links in the network will never be used for carrying any data?",
        "options": [
          {
            "id": 0,
            "text": "4",
            "feedback": "Incorrect. After distance-vector routing stabilizes, two links will never be used. Explain why this option is wrong by showing which links are unused and why."
          },
          {
            "id": 1,
            "text": "3",
            "feedback": "Incorrect. Only two links remain unused, not three. Show reasoning identifying the unused links (the highest-cost links in redundant rings) and why routes prefer cheaper alternatives."
          },
          {
            "id": 2,
            "text": "2",
            "feedback": "Correct. Two links will never be used for carrying any data. Provide concise explanation identifying which links are unused and why distance-vector routing chooses other paths based on path costs."
          },
          {
            "id": 3,
            "text": "1",
            "feedback": "Incorrect. Only two links remain unused, not one. Provide reasoning pointing out which specific links are never chosen due to higher cumulative path costs compared to alternatives."
          }
        ]
      },
      "answer": {
        "correctOption": 2,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Correct. Two links will never be used for carrying any data. Provide concise explanation identifying which links are unused and why distance-vector routing chooses other paths based on path costs.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3947,
      "type": "MCQ",
      "difficulty": "EXPERT",
      "topology": {
        "subjectId": "68da428f31f60703d6614943",
        "topicId": "68da42cb31f60703d6619bb2",
        "subtopicId": "68da447031f60703d6644c97"
      },
      "content": {
        "questionText": "A hash table of length 10 uses open addressing with hash function h(k)=k mod 10, and linear probing. After inserting 6 values into an empty hash table, the table is as shown below \\(\\begin{array}{|l|l|}\\hline \\text{0}  &  \\text{} \\\\ \\hline \\text{1} & \\text{} \\\\\\hline  \\text{2} & \\text{42} \\\\ \\hline  \\text{3} & \\text{23} \\\\\\hline   \\text{4} & \\text{34} \\\\\\hline   \\text{5} & \\text{52} \\\\\\hline   \\text{6} & \\text{46} \\\\\\hline   \\text{7} & \\text{33} \\\\\\hline   \\text{8} & \\text{} \\\\\\hline   \\text{9} & \\text{} \\\\\\hline   \\end{array}\\) How many different insertion sequences of the key values using the same hash function and linear probing will result in the hash table shown above?",
        "options": [
          {
            "id": 0,
            "text": "10",
            "feedback": "10 is incorrect. The partial-order constraints from linear probing allow many more insertion orders than 10. A careful count shows 30 valid orderings (see solution)."
          },
          {
            "id": 1,
            "text": "20",
            "feedback": "20 is incorrect. While 20 is closer, it still undercounts the valid insertion sequences. The correct count is 30, obtained by counting permutations that satisfy the derived precedence constraints."
          },
          {
            "id": 2,
            "text": "30",
            "feedback": "30 is correct. There are 30 insertion sequences that produce the given table; see the solution for a concise derivation using dependency constraints and a small combinatorial count."
          },
          {
            "id": 3,
            "text": "40",
            "feedback": "40 is incorrect. This overcounts the possibilities. The constraints coming from keys' home slots reduce the number of valid permutations to 30, not 40."
          }
        ]
      },
      "answer": {
        "correctOption": 2,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key idea:  use the fact that a key that ends at position p with home h must be inserted after all keys occupying slots h..p-1. Identify keys and homes: 42→2, 23→3, 34→4, 52→2, 46→6, 33→3. From their final positions, 52 ends at slot 5 but has home 2, so the keys at slots 2, 3, 4 (42, 23, 34) must have been inserted before 52. 33 ends at slot 7 but has home 3, so the keys at slots 3, 4, 5, 6 (23, 34, 52, 46) must have been inserted before 33. Thus 33 must come after all the other five keys, so 33 is fixed as the last insertion. Among the remaining five (42, 23, 34, 52, 46), only 52 must come after 42, 23, 34; 46 has no constraints. So we need permutations of these five where 52 is after 42, 23, 34. Count them: there are 5! = 120 permutations of the five items, and in exactly one quarter of those permutations 52 is after the three specific items (42, 23, 34). So the count is 120/4 = 30. Answer: 30",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3945,
      "type": "MCQ",
      "difficulty": "EXPERT",
      "topology": {
        "subjectId": "68da44eb31f60703d66701cb",
        "topicId": "68da45d331f60703d669ea69",
        "subtopicId": "68da4b515e8ee4416baa16fa"
      },
      "content": {
        "questionText": "Consider a complete undirected graph with vertex set {0, 1, 2, 3, 4}. Entry Wij in the matrix W below is the weight of the edge {i, j}. W =  \\(\\begin{pmatrix} 0 & 1 & 8 & 1 & 4 \\\\ 1 & 0 & 12 & 4 & 9 \\\\ 8 & 12 & 0 & 7 & 3 \\\\ 1 & 4 & 7 & 0 & 2 \\\\ 4 & 9 & 3 & 2 & 0 \\end{pmatrix}\\) What is the minimum possible weight of a path P from vertex 1 to vertex 2 in this graph such that P contains at most 3 edges?",
        "options": [
          {
            "id": 0,
            "text": "7",
            "feedback": "Incorrect. The weight 7 would come from the path 1->0->3->4->2 with weights 1+1+2+3 = 7, but that path uses 4 edges and violates the 'at most 3 edges' constraint. With ≤3 edges the best achievable weight is 8."
          },
          {
            "id": 1,
            "text": "8",
            "feedback": "Correct. Path 1->0->4->2 has weights 1+4+3 = 8 and uses 3 edges. Direct 1->2 is 12 and the best 2-edge path is 1->0->2 = 9, so 8 is the minimum with ≤3 edges."
          },
          {
            "id": 2,
            "text": "9",
            "feedback": "Incorrect. Paths of weight 9 exist (for example 1->0->2 = 1+8 = 9 or 1->3->4->2 = 4+2+3 = 9), but a smaller weight 8 is achievable with 3 edges."
          },
          {
            "id": 3,
            "text": "10",
            "feedback": "Incorrect. Weight 10 is not the minimum under the ≤3-edges constraint because there exists a 3-edge path of weight 8 (1->0->4->2 = 1+4+3)."
          }
        ]
      },
      "answer": {
        "correctOption": 1,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Correct. Path 1->0->4->2 has weights 1+4+3 = 8 and uses 3 edges. Direct 1->2 is 12 and the best 2-edge path is 1->0->2 = 9, so 8 is the minimum with ≤3 edges.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3943,
      "type": "MCQ",
      "difficulty": "ADVANCED",
      "topology": {
        "subjectId": "68da1e1f5e8ee4416b3e5266",
        "topicId": "68da1e3d31f60703d609dae9",
        "subtopicId": "68da1f1c31f60703d60ce831"
      },
      "content": {
        "questionText": "A computer system has an L1 cache, an L2 cache, and a main memory unit connected as shown below. The block size in L1 cache is 4 words. The block size in L2 cache is 16 words. The memory access times are 2 nanoseconds. 20 nanoseconds and 200 nanoseconds for L1 cache, L2 cache and main memory unit respectively.  When there is a miss in both L1 cache and L2 cache, first a block is transferred from main memory to L2 cache, and then a block is transferred from L2 cache to L1 cache. What is the total time taken for these transfers?",
        "options": [
          {
            "id": 0,
            "text": "222 nanoseconds",
            "feedback": "222 nanoseconds is too small. That value would match simply adding one main-memory access (200 ns), one L2 access (20 ns), and one L1 access (2 ns) as if the entire 16-word block moved in a single 4-word bus transfer. But the main memory block is 16 words and the bus width is 4 words, so the 16-word block requires four separate 4-word transfers from main memory to L2. Each of those transfers incurs the main-memory access time and the L2 access time."
          },
          {
            "id": 1,
            "text": "888 nanoseconds",
            "feedback": "888 nanoseconds is close but still incorrect. It matches computing four 4-word transfers from main memory to L2 as 4 × (200 ns) = 800 ns plus four internal L2 accesses as 4 × (20 ns) = 80 ns, giving 880 ns in total. That calculation misses the final transfer from L2 to L1: when L2 supplies the 4-word block to L1 there is one L2 access (20 ns) and one L1 access (2 ns) for that transfer, adding 22 ns and bringing the total to 902 ns."
          },
          {
            "id": 2,
            "text": "902 nanoseconds",
            "feedback": "902 nanoseconds is correct. Reasoning: the 16-word block is transferred from main memory to L2 in four 4-word bus transfers; each transfer costs the main-memory access time (200 ns) plus the L2 access time (20 ns), so 4 × (200 + 20) = 880 ns. Then L2 supplies the 4-word block to L1 in one 4-word transfer costing L2 access (20 ns) plus L1 access (2 ns) = 22 ns. Total = 880 + 22 = 902 ns."
          },
          {
            "id": 3,
            "text": "968 nanoseconds",
            "feedback": "968 nanoseconds is too large. It likely results from double-counting some access times or assuming more than one 4-word transfer from L2 to L1. The correct breakdown counts four 4-word transfers from main memory to L2 (4 × (200 + 20) = 880 ns) and one 4-word transfer from L2 to L1 (20 + 2 = 22 ns), totaling 902 ns. 968 ns does not match this correct accounting."
          }
        ]
      },
      "answer": {
        "correctOption": 2,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key insight:  transfers happen in 4-word bus beats. The 16-word block from main memory arrives at L2 in four 4-word transfers, and L2 then supplies one 4-word transfer to L1. Main memory → L2: 16-word block, bus width 4 words ⇒ 4 transfers. Each transfer incurs main-memory access (200 ns) plus L2 access (20 ns) = 220 ns per transfer. Total = 4 × 220 ns = 880 ns. L2 → L1: L1 block size is 4 words, so L2 sends one 4-word transfer. That transfer costs L2 access (20 ns) plus L1 access (2 ns) = 22 ns. Total time for both transfers = 880 ns + 22 ns = 902 ns.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3941,
      "type": "MCQ",
      "difficulty": "EXPERT",
      "topology": {
        "subjectId": "68da217e31f60703d61408e4",
        "topicId": "68da229431f60703d6167703",
        "subtopicId": "68da33575e8ee4416b6f5b3e"
      },
      "content": {
        "questionText": "Suppose computers A and B have IP addresses 10.105.1.113 and 10.105.1.91 respectively and they both use the same net mask N. Which of the values of N given below should not be used if A and B should belong to the same network?",
        "options": [
          {
            "id": 0,
            "text": "255.255.255.0",
            "feedback": "Incorrect. With mask 255.255.255.0 (/24) both IPs 10.105.1.113 and 10.105.1.91 fall in the same subnet 10.105.1.0 — so this mask is acceptable when A and B should be in the same network."
          },
          {
            "id": 1,
            "text": "255.255.255.128",
            "feedback": "Incorrect. With mask 255.255.255.128 (/25) the network ranges are 10.105.1.0–10.105.1.127 and 10.105.1.128–10.105.1.255. Both addresses (91 and 113) lie in 10.105.1.0–127, so they are in the same subnet; the mask is acceptable."
          },
          {
            "id": 2,
            "text": "255.255.255.192",
            "feedback": "Incorrect. With mask 255.255.255.192 (/26) subnets are sized 64 addresses: 0–63, 64–127, 128–191, etc. Both host numbers 91 and 113 are within 64–127, so they are in the same subnet; the mask is acceptable."
          },
          {
            "id": 3,
            "text": "255.255.255.224",
            "feedback": "Correct. With mask 255.255.255.224 (/27) subnets are 32-address blocks: 0–31,32–63,64–95,96–127,... The addresses 91 and 113 fall into different /27 subnets: 91 is in 64–95 while 113 is in 96–127 — so this mask would place A and B on different networks."
          }
        ]
      },
      "answer": {
        "correctOption": 3,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Correct. With mask 255.255.255.224 (/27) subnets are 32-address blocks: 0–31,32–63,64–95,96–127,... The addresses 91 and 113 fall into different /27 subnets: 91 is in 64–95 while 113 is in 96–127 — so this mask would place A and B on different networks.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3937,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subjectId": "68d38ec66dbf3983bc810cd9",
        "topicId": "68d38f2f6dbf3983bc828bf0",
        "subtopicId": "68d39567d857e762193a99be"
      },
      "content": {
        "questionText": "The following functional dependencies hold for relations R(A, B, C) and S(B, D, E) B → A, A → C The relation R contains 200 tuples and the relation S contains 100 tuples. What is the maximum number of tuples possible in the natural join R  \\( \\bowtie \\)  S?",
        "options": [
          {
            "id": 0,
            "text": "100",
            "feedback": "Correct. Because B → A and A → C imply B → A,C, B functionally determines all attributes of R. Therefore each value of B appears in at most one tuple of R, so each tuple of S can match at most one tuple of R. If all B values in S appear in R, the join has 100 tuples (one per tuple of S), which is the maximum."
          },
          {
            "id": 1,
            "text": "200",
            "feedback": "Incorrect. Although R has 200 tuples, B → A and A → C make B a key for R (each B appears in at most one R-tuple). Since S has only 100 tuples and each S-tuple can match at most one R-tuple, the join cannot exceed 100."
          },
          {
            "id": 2,
            "text": "300",
            "feedback": "Incorrect. 300 would require more matches than there are tuples in S. Because B determines all attributes of R, each S-tuple matches at most one R-tuple, so the maximum number of join tuples is |S| = 100."
          },
          {
            "id": 3,
            "text": "2000",
            "feedback": "Incorrect. 2000 is the product 200×100 (a Cartesian product). A natural join on B cannot produce the full Cartesian product here because B determines R, so each S-tuple matches at most one R-tuple; the join cannot reach 2000 and is at most 100."
          }
        ]
      },
      "answer": {
        "correctOption": 0,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Answer: 100 Reasoning: From the functional dependencies B → A and A → C, by transitivity we get B → A,C. So B functionally determines all attributes of relation R. Therefore, within R each value of B can appear in at most one tuple (B is a key for R). A natural join between R and S matches tuples on B. Because each B value in S can match at most one tuple in R, each tuple of S contributes at most one tuple to the join. S has 100 tuples, so the join can have at most 100 tuples. This bound is achievable if every B value present in S also appears in R (with at most one matching R tuple per B), in which case the join produces exactly 100 tuples.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3936,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subjectId": "68d38ec66dbf3983bc810cd9",
        "topicId": "68d38f496dbf3983bc82b251",
        "subtopicId": "68d397236dbf3983bc8fc5ea"
      },
      "content": {
        "questionText": "Consider the following schedule for transactions  \\(T1, T2\\)  and  \\(T3\\) : \\(\\begin{array}{|c|c|c|}\\hline \\textbf{T1} & \\textbf{T2} & \\textbf{T3} \\\\\\hline  \\text{Read(X)} & \\text{} & \\text{} \\\\\\hline   \\text{} & \\text{Read(Y)} & \\text{} \\\\\\hline  \\text{} & \\text{} & \\text{Read(Y)} \\\\\\hline \\text{} & \\text{Write(Y)} & \\text{} \\\\\\hline  \\text{Write(X)} & \\text{} & \\text{} \\\\\\hline  \\text{} & \\text{} & \\text{Write(X)} \\\\\\hline  \\text{} & \\text{Read(X)} & \\text{} \\\\\\hline \\text{} & \\text{Write(X)} & \\text{} \\\\\\hline\\end{array}\\) Which one of the schedules below is the correct serialization of the above?",
        "options": [
          {
            "id": 0,
            "text": "\\(T1 \\to T3 \\to T2\\)",
            "feedback": "Correct. Build the precedence (conflict) graph from the timeline: T1's operations on X (Read(X) then Write(X)) occur before T3's Write(X) and before T2's later Read(X)/Write(X), and T3's Read(Y) happens before T2's Write(Y). These conflicts create edges T1 -> T3, T1 -> T2, and T3 -> T2, so a serial order consistent with these edges is T1 → T3 → T2."
          },
          {
            "id": 1,
            "text": "\\(T2 \\to T1 \\to T3\\)",
            "feedback": "Incorrect. This order places T2 before T1, but T1 performs Write(X) before T2 later reads/writes X. That write-read and write-write conflict requires T1 to come before T2, so T2 cannot be first."
          },
          {
            "id": 2,
            "text": "\\(T2 \\to T3 \\to T1\\)",
            "feedback": "Incorrect. This order puts T1 after T3, but T1's Read(X) and Write(X) occur before T3's Write(X). Those read-write and write-write conflicts force T1 to precede T3, so T1 cannot be last."
          },
          {
            "id": 3,
            "text": "\\(T3 \\to T1 \\to T2\\)",
            "feedback": "Incorrect. This order places T3 before T1, but T1 performs operations on X (Read(X) then Write(X)) that occur before T3's Write(X). Those conflicts require T1 -> T3, so T3 cannot come before T1."
          }
        ]
      },
      "answer": {
        "correctOption": 0,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key insight:  construct the precedence graph from conflicting operations. Timeline of operations (top to bottom): T1: Read(X); T2: Read(Y); T3: Read(Y); T2: Write(Y); T1: Write(X); T3: Write(X); T2: Read(X); T2: Write(X). Identify conflicts and add directed edges: Between T1 and T3 on X: T1's Read(X) and Write(X) occur before T3's Write(X) → conflicts produce edge T1 → T3. Between T1 and T2 on X: T1's Write(X) occurs before T2's later Read(X)/Write(X) → edge T1 → T2. Between T3 and T2 on Y and X: T3's Read(Y) occurs before T2's Write(Y), and T3's Write(X) occurs before T2's Read/Write(X) → edge T3 → T2. Precedence graph edges: T1 → T3, T1 → T2, T3 → T2. A topological ordering consistent with these edges is T1, then T3, then T2. Therefore the correct serial schedule equivalent to the given interleaving is T1 → T3 → T2.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3926,
      "type": "MCQ",
      "difficulty": "ADVANCED",
      "topology": {
        "subjectId": "68cbde4f61903cd7d6ed67c5",
        "topicId": "68cbe53661903cd7d61055d2",
        "subtopicId": "68cbe7ed61903cd7d61be4b0"
      },
      "content": {
        "questionText": "In the sequential circuit shown below, if the initial value of the output  \\(Q_1Q_0\\)  is 00, what are the next four values of  \\(Q_1Q_0\\) ?",
        "options": [
          {
            "id": 0,
            "text": "11,10,01,00",
            "feedback": "Correct. The left T input is 1 so Q0 toggles every clock. The right flip-flop's T input is the complement of Q0, so Q1 toggles when Q0 (before the clock) is 0. Step-by-step from Q1Q0 = 00: Clock 1 -> 11; Clock 2 -> 10; Clock 3 -> 01; Clock 4 -> 00. Hence the next four values are 11, 10, 01, 00."
          },
          {
            "id": 1,
            "text": "10,11,01,00",
            "feedback": "Incorrect. From 00, Q0 toggles to 1 and the right T = NOT(Q0) = 1, so Q1 also toggles to 1. The first next state must be 11, not 10. Therefore the sequence 10, 11, 01, 00 is wrong."
          },
          {
            "id": 2,
            "text": "10,00,01,11",
            "feedback": "Incorrect. The first next state from 00 must be 11 (both bits become 1), so a sequence that starts with 10 is incorrect. This sequence also doesn't follow the correct Q1 toggling rule (Q1 toggles when Q0 = 0)."
          },
          {
            "id": 3,
            "text": "11,10,00,01",
            "feedback": "Incorrect. The first two states 11, 10 match the correct behavior, but the third state should be 01. From 10 (Q1=1,Q0=0), Q0 toggles to 1 and T for Q1 = NOT(0) = 1 so Q1 toggles to 0 → state 01. This sequence gives 00 instead, so it is wrong."
          }
        ]
      },
      "answer": {
        "correctOption": 0,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Correct. The left T input is 1 so Q0 toggles every clock. The right flip-flop's T input is the complement of Q0, so Q1 toggles when Q0 (before the clock) is 0. Step-by-step from Q1Q0 = 00: Clock 1 -> 11; Clock 2 -> 10; Clock 3 -> 01; Clock 4 -> 00. Hence the next four values are 11, 10, 01, 00.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3925,
      "type": "MCQ",
      "difficulty": "ADVANCED",
      "topology": {
        "subjectId": "68cbde4f61903cd7d6ed67c5",
        "topicId": "68cbde9361903cd7d6eddb74",
        "subtopicId": "68cbe64f61903cd7d61401b7"
      },
      "content": {
        "questionText": "What is the Boolean expression for the output  \\(f\\)  of the combinational logic circuit of NOR gates given below?",
        "options": [
          {
            "id": 0,
            "text": "\\(\\overline{Q+R}\\)",
            "feedback": "Correct. If you name the first-stage outputs A = not(P+Q) and B = not(Q+R), then the next-stage output combining those is not(A + B) = (P+Q)(Q+R). Doing the same for the lower branch gives (P+R)(Q+R). The sum of those two terms simplifies to Q+R, so the final NOR produces not(Q+R)."
          },
          {
            "id": 1,
            "text": "\\(\\overline{P+Q}\\)",
            "feedback": "Incorrect. The circuit simplifies to not(Q+R), not not(P+Q). Although not(P+Q) appears as one intermediate signal, the rest of the network combines signals so that the final output depends only on Q and R (specifically not(Q+R))."
          },
          {
            "id": 2,
            "text": "\\(\\overline{P+R}\\)",
            "feedback": "Incorrect. not(P+R) is another intermediate output in the circuit, but after the further NOR stages the combined expression reduces to not(Q+R). The final result does not equal not(P+R)."
          },
          {
            "id": 3,
            "text": "\\(\\overline{P+Q+R}\\)",
            "feedback": "Incorrect. The expression not(P+Q+R) is too broad — the circuit actually factors so the final OR before the last inversion equals Q+R, not P+Q+R. Therefore the final output is not(Q+R), not not(P+Q+R)."
          }
        ]
      },
      "answer": {
        "correctOption": 0,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key idea:  treat each NOR as an inverted OR and apply De Morgan to simplify. Let A = not(P+Q), B = not(Q+R), C = not(P+R), D = not(Q+R). The second-stage NOR outputs are E = not(A + B) and F = not(C + D). Using De Morgan, E = (P+Q)(Q+R) and F = (P+R)(Q+R). Combine E and F: E + F = (Q+R)[(P+Q)+(P+R)] = (Q+R)(P+Q+R) = Q+R. The final output is the NOR of E and F, so f = not(E + F) = not(Q+R). Answer: f = not(Q+R).",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3924,
      "type": "MCQ",
      "difficulty": "ADVANCED",
      "topology": {
        "subjectId": "68d24e621c69bbb6f527dabb",
        "topicId": "68d24eab1c69bbb6f52867db",
        "subtopicId": "68d25155b905a26b8edec702"
      },
      "content": {
        "questionText": "Suppose the predicate  \\( F(x, y, t)\\)  is used to represent the statement that person  \\(x\\)  can fool person  \\(y\\)  at time  \\(t\\) . which one of the statements below expresses best the meaning of the formula  \\(∀x∃y∃t(¬F(x, y, t))\\)  ?",
        "options": [
          {
            "id": 0,
            "text": "Everyone can fool some person at some time",
            "feedback": "Incorrect. This statement says for every person there is someone and a time that the person can fool (formal: ∀x∃y∃t F(x,y,t)). The given formula has ¬F inside, so it asserts the opposite — for each person there is someone and a time they cannot fool."
          },
          {
            "id": 1,
            "text": "No one can fool everyone all the time",
            "feedback": "Correct. ∀x∃y∃t ¬F(x,y,t) means: for each person x there exists a person y and a time t such that x does not fool y at that time. This is equivalent to ¬∃x∀y∀t F(x,y,t), which reads “there is no person who can fool every person at every time” — i.e. “No one can fool everyone all the time.”"
          },
          {
            "id": 2,
            "text": "Everyone cannot fool some person all the time",
            "feedback": "Incorrect. The phrase usually means for each person there is someone they never fool (formal: ∀x∃y∀t ¬F(x,y,t)), which requires the failure to fool to hold for all times. The given formula only requires some time when the fooling fails (∃t), so this option is stronger and not equivalent."
          },
          {
            "id": 3,
            "text": "No one can fool some person at some time",
            "feedback": "Incorrect. This denies that any person can fool some person at some time (formal: ¬∃x∃y∃t F(x,y,t), equivalent to ∀x∀y∀t ¬F(x,y,t)), i.e. nobody can fool anyone ever. That is much stronger than the given formula, which only requires for each person there is someone and a time they fail to fool."
          }
        ]
      },
      "answer": {
        "correctOption": 1,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Formal reading:  For every person x there exists a person y and a time t such that x does not fool y at time t (i.e. ∀x∃y∃t ¬F(x,y,t)). Equivalence:  This formula is equivalent to ¬∃x∀y∀t F(x,y,t). In words: it is not the case that there exists a person who can fool every person at every time. Natural-language paraphrase:  \"No one can fool everyone all the time.\" Why other phrasings are incorrect: The statement \"Everyone can fool some person at some time\" affirms that for each person there exists someone and a time they can fool; the given formula instead asserts that for each person there exists someone and a time they do not fool, so these are opposites. The statement \"Everyone cannot fool some person all the time\" means each person has someone they never fool (failure for every time), whereas the formula requires only the existence of at least one time when they do not fool that person (weaker condition). The statement \"No one can fool some person at some time\" denies that any fooling ever occurs (no person fools any person at any time), which is a much stronger claim than the given formula that only requires each person has at least one person and one time they fail to fool.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3922,
      "type": "MCQ",
      "difficulty": "ADVANCED",
      "topology": {
        "subjectId": "68d24e621c69bbb6f527dabb",
        "topicId": "68d24e8eb905a26b8ed9c0f3",
        "subtopicId": "68d25026b905a26b8edbbe08"
      },
      "content": {
        "questionText": "The degree sequence of a simple graph is the sequence of the degrees of the nodes in the graph in decreasing order. Which of the following sequences can not be the degree sequence of any graph? I. 7, 6, 5, 4, 4, 3, 2, 1       II. 6, 6, 6, 6, 3, 3, 2, 2 III. 7, 6, 6, 4, 4, 3, 2, 2     IV. 8, 7, 7, 6, 4, 2, 1, 1",
        "options": [
          {
            "id": 0,
            "text": "I and II",
            "feedback": "Incorrect. The sequence 7, 6, 5, 4, 4, 3, 2, 1 is a valid degree sequence (Havel-Hakimi reduces it to all zeros), while 6, 6, 6, 6, 3, 3, 2, 2 is not (it fails the Erdős–Gallai inequality). So the claim that both cannot be degree sequences is false."
          },
          {
            "id": 1,
            "text": "III and IV",
            "feedback": "Incorrect. The sequence 7, 6, 6, 4, 4, 3, 2, 2 is graphical (it satisfies the Erdős–Gallai conditions), but 8, 7, 7, 6, 4, 2, 1, 1 is impossible because a vertex cannot have degree 8 in an 8-vertex simple graph. Thus the claim that both cannot be degree sequences is false."
          },
          {
            "id": 2,
            "text": "IV only",
            "feedback": "Incorrect. While 8, 7, 7, 6, 4, 2, 1, 1 is indeed impossible (a vertex cannot have degree 8 in an 8-vertex simple graph), the sequence 6, 6, 6, 6, 3, 3, 2, 2 is also non-graphical (it violates Erdős–Gallai at k=4). So saying only the fourth sequence is non-graphical is wrong."
          },
          {
            "id": 3,
            "text": "II and IV",
            "feedback": "Correct. Both listed sequences cannot occur as degree sequences: 6, 6, 6, 6, 3, 3, 2, 2 violates the Erdős–Gallai inequality (for k = 4 the left side is 24 but the right side is 22), and 8, 7, 7, 6, 4, 2, 1, 1 is impossible because a vertex cannot have degree 8 in an 8-vertex simple graph."
          }
        ]
      },
      "answer": {
        "correctOption": 3,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Correct answer: the sequences 6, 6, 6, 6, 3, 3, 2, 2 and 8, 7, 7, 6, 4, 2, 1, 1 cannot be degree sequences. 6, 6, 6, 6, 3, 3, 2, 2 fails the Erdős–Gallai inequality for k = 4: the sum of the first four degrees is 24, while the right-hand side equals 4·3 + (min(3,4)+min(3,4)+min(2,4)+min(2,4)) = 12 + 3 + 3 + 2 + 2 = 22, so 24 > 22 and the sequence is not graphical. 8, 7, 7, 6, 4, 2, 1, 1 is impossible because in a simple graph on 8 vertices the maximum possible degree is 7, so a degree of 8 cannot occur. Quick notes on the other sequences: 7, 6, 5, 4, 4, 3, 2, 1 is graphical (Havel-Hakimi reduces it to all zeros). 7, 6, 6, 4, 4, 3, 2, 2 satisfies the Erdős–Gallai inequalities and is graphical.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3914,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subjectId": "68d38ec66dbf3983bc810cd9",
        "topicId": "68ee93ef6b8fec0fda9c68c0",
        "subtopicId": "68ee95339a9856840850ee6b"
      },
      "content": {
        "questionText": "Which of the following concurrency control protocols ensure both conflict serializability and freedom from deadlock? I. 2-phase locking II. Time-stamp ordering",
        "options": [
          {
            "id": 0,
            "text": "I only",
            "feedback": "Incorrect. Two-phase locking (2PL) enforces conflict serializability by ensuring a strict lock protocol, but it can produce deadlocks because transactions may wait on locks held by others."
          },
          {
            "id": 1,
            "text": "II only",
            "feedback": "Correct. Time-stamp ordering enforces a global ordering of conflicting operations (so schedules are conflict-serializable) and is deadlock-free because transactions do not wait for locks — conflicts are resolved by aborting/rolling back based on timestamps."
          },
          {
            "id": 2,
            "text": "Both I and II",
            "feedback": "Incorrect. While both protocols provide conflict serializability, two-phase locking can deadlock, so it does not guarantee freedom from deadlock; therefore both do not satisfy the stated requirement."
          },
          {
            "id": 3,
            "text": "Neither I nor II",
            "feedback": "Incorrect. Time-stamp ordering does ensure both conflict serializability and freedom from deadlock, so it is wrong to say neither protocol satisfies the requirements."
          }
        ]
      },
      "answer": {
        "correctOption": 1,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key insight:  we must check both conflict serializability and whether the protocol can cause deadlocks. Two-phase locking (2PL): Enforces conflict serializability by acquiring and releasing locks in two phases, but it can produce deadlocks because transactions may block waiting for locks held by others. Time-stamp ordering: Uses global timestamps to order conflicting operations, which guarantees conflict serializability. It is deadlock-free because transactions do not wait for each other; conflicts are resolved by aborting or rejecting operations based on timestamps. Conclusion: Only time-stamp ordering satisfies both conflict serializability and freedom from deadlock.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3913,
      "type": "MCQ",
      "difficulty": "ADVANCED",
      "topology": {
        "subjectId": "68d38ec66dbf3983bc810cd9",
        "topicId": "68d38f386dbf3983bc828e43",
        "subtopicId": "68d39684d857e762193d2792"
      },
      "content": {
        "questionText": "A relational schema for a train reservation database is given below Passenger (pid, pname, age) Re servation (pid, cass, tid)  What pids are returned by the following SQL query for the above instance of the tables? \n\nSLECT pid\n\nFROM Reservation ,\n\nWHERE class ‘AC’ AND\n\n    EXISTS (SELECT *\n\n           FROM Passenger\n\n           WHERE age > 65 AND\n\n           Passenger. pid = Reservation.pid)",
        "options": [
          {
            "id": 0,
            "text": "1, 0",
            "feedback": "Incorrect. pid 0 has age 65, which does not satisfy the condition age > 65, so pid 0 is excluded. The query returns pids that have an 'AC' reservation and a matching passenger older than 65 — those are 1 and 3."
          },
          {
            "id": 1,
            "text": "1, 2",
            "feedback": "Incorrect. Although pid 2 is a passenger older than 65, pid 2's reservation shown is class 'SC', not 'AC', so it does not satisfy the class = 'AC' condition. The correct pids returned are 1 and 3."
          },
          {
            "id": 2,
            "text": "1, 3",
            "feedback": "Correct. pid 1 and pid 3 both have reservations with class 'AC' and their corresponding Passenger rows show ages greater than 65 (66 and 69 respectively). Other pids are excluded because pid 0 has age 65 (not >65), pid 2 has only 'SC' reservations, and pid 5 has an 'AC' reservation but no Passenger row to satisfy the EXISTS condition."
          },
          {
            "id": 3,
            "text": "1, 5",
            "feedback": "Incorrect. pid 5 appears in Reservation with class 'AC' but there is no Passenger row for pid 5, so the EXISTS subquery (which requires a matching Passenger with age > 65) fails. The pids that satisfy both conditions are 1 and 3."
          }
        ]
      },
      "answer": {
        "correctOption": 2,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Answer: pid 1 and pid 3. Reason: Find passengers with age > 65: pids 1 (66), 2 (67), and 3 (69). Find Reservation rows with class 'AC': pids 0, 1, 5, and 3. Take the intersection (both conditions must hold): pids 1 and 3. Notes: pid 0 is age 65 (not >65), pid 2 has only 'SC' reservations (not 'AC'), and pid 5 has an 'AC' reservation but no Passenger row to satisfy the EXISTS subquery.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3912,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subjectId": "68d38ec66dbf3983bc810cd9",
        "topicId": "68d38f24d857e762192dcac6",
        "subtopicId": "68d39833d857e762194168fd"
      },
      "content": {
        "questionText": "Consider a B +  -tree in which the maximum number of keys in a node is 5. What is the minimum number of keys in any non-root node?",
        "options": [
          {
            "id": 0,
            "text": "1",
            "feedback": "Incorrect. If the maximum number of keys is 5, then the maximum number of children is 6. Each non-root node must have at least half the maximum children (rounded up), so it needs at least 3 children, which means at least 2 keys. A single key (1) is too few."
          },
          {
            "id": 1,
            "text": "2",
            "feedback": "Correct. With maximum 5 keys, a node can have up to 6 children. A non-root node must have at least ceil(6/2)=3 children, so the minimum number of keys is 3-1=2."
          },
          {
            "id": 2,
            "text": "3",
            "feedback": "Incorrect. Three keys would correspond to 4 children; while some nodes may have 3 or more children, the required minimum number of keys for every non-root node is 2, not 3."
          },
          {
            "id": 3,
            "text": "4",
            "feedback": "Incorrect. Four keys would correspond to 5 children, which is above the required minimum. The minimum number of keys for a non-root node given a 5-key maximum is 2."
          }
        ]
      },
      "answer": {
        "correctOption": 1,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Answer:  2 Reasoning: Maximum number of keys in a node = 5, so the maximum number of children = 5 + 1 = 6. Every non-root node must have at least ceil(maximum children / 2) children = ceil(6 / 2) = 3 children. Minimum number of keys = minimum children - 1 = 3 - 1 = 2. Note: The root is allowed to have fewer keys, but the question asks about any non-root node.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3910,
      "type": "MCQ",
      "difficulty": "BEGINNER",
      "topology": {
        "subjectId": "68da217e31f60703d61408e4",
        "topicId": "68da23455e8ee4416b4d422b",
        "subtopicId": "68da354931f60703d64100fb"
      },
      "content": {
        "questionText": "Which one of the following is not a client server application?",
        "options": [
          {
            "id": 0,
            "text": "Internet chat",
            "feedback": "Internet chat typically uses a client-server model: user clients connect to a chat server (or a set of servers) that relays messages, manages rooms, and stores state (examples: IRC, Slack, many web chat systems). So Internet chat is a client-server application."
          },
          {
            "id": 1,
            "text": "Web browsing",
            "feedback": "Web browsing uses the HTTP/HTTPS protocol where the web browser acts as a client requesting resources from a web server. That request–response interaction is a standard client-server pattern."
          },
          {
            "id": 2,
            "text": "E-mail",
            "feedback": "E-mail is implemented with client-server protocols (such as SMTP for sending and POP3/IMAP for retrieving). Mail clients interact with mail servers to send, receive, and store messages, so e-mail is a client-server application."
          },
          {
            "id": 3,
            "text": "Ping",
            "feedback": "Ping is a network diagnostic utility that uses the ICMP protocol (Echo Request/Reply) at the network layer to test reachability. It is not an application-layer client-server service, so Ping is not a client-server application."
          }
        ]
      },
      "answer": {
        "correctOption": 3,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Correct answer: Ping  — Ping is not a client-server application. Why Ping is not client-server: Ping uses the ICMP Echo Request/Reply at the network layer as a diagnostic tool. It is a simple host-to-host network utility, not an application-layer client that interacts with a dedicated application server. Why the others are client-server: Web browsing uses HTTP(S) where browsers request resources from web servers; e-mail uses SMTP/IMAP/POP where mail clients talk to mail servers; Internet chat systems usually have clients connecting to chat servers that route messages.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3909,
      "type": "MCQ",
      "difficulty": "BEGINNER",
      "topology": {
        "subjectId": "68da217e31f60703d61408e4",
        "topicId": "68da227d5e8ee4416b4bd49f",
        "subtopicId": "68da2e0d31f60703d634a9da"
      },
      "content": {
        "questionText": "One of the header fields in an IP datagram is the Time to Live (TTL) field. Which of the following statements best explains the need for this field?",
        "options": [
          {
            "id": 0,
            "text": "It can be used to prioritize packets",
            "feedback": "Incorrect. The TTL field is not used to prioritize packets. Packet prioritization is handled by fields such as the Differentiated Services Code Point (DSCP) or the older TOS field. TTL limits a packet's lifetime, not its priority."
          },
          {
            "id": 1,
            "text": "It can be used to reduce delays",
            "feedback": "Incorrect. TTL does not reduce delays. It limits how long a packet can circulate in the network by counting down at each hop. Delays are affected by routing, queuing, and congestion, not by the TTL value."
          },
          {
            "id": 2,
            "text": "It can be used to optimize throughput",
            "feedback": "Incorrect. TTL does not optimize throughput. Throughput is managed by congestion control and flow control mechanisms (usually at transport layer) and by routing/queue management in the network. TTL only stops packets from living forever."
          },
          {
            "id": 3,
            "text": "It can be used to prevent packet looping",
            "feedback": "Correct. The Time to Live field prevents packets from looping indefinitely by limiting the number of hops a packet can traverse. Each router decrements the TTL; when it reaches zero, the packet is discarded (and in IPv4 an ICMP \"Time Exceeded\" message is usually sent back). In IPv6 the equivalent field is called Hop Limit."
          }
        ]
      },
      "answer": {
        "correctOption": 3,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key idea:  The TTL field limits how long a packet can remain in the network by being decremented at each hop (measured in hops). Each router that forwards the packet decreases the TTL by one. If the TTL reaches zero, the router discards the packet. Discarding packets whose TTL expired prevents packets caught in routing loops from circulating forever. In IPv4, an ICMP \"Time Exceeded\" message is typically sent to the sender when a packet is dropped for TTL expiry. IPv6 uses an equivalent field called Hop Limit. Note: TTL is not for prioritization, delay reduction, or throughput optimization—those are handled by other mechanisms (e.g., DSCP/TOS for priority, routing/queuing for delays, and transport-layer congestion control for throughput).",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3903,
      "type": "MCQ",
      "difficulty": "ADVANCED",
      "topology": {
        "subjectId": "68cbde4f61903cd7d6ed67c5",
        "topicId": "68cbe52d61903cd7d610466e",
        "subtopicId": "68cbe73661903cd7d617a2f9"
      },
      "content": {
        "questionText": "The Boolean expression for the output  \\(f\\)  of the multiplexer shown below is",
        "options": [
          {
            "id": 0,
            "text": "\\(\\overline {P \\oplus Q \\oplus R}\\)",
            "feedback": "This is the negation of the XOR of P, Q and R. The multiplexer output is not the complement; using the select bits P and Q the MUX implements P ⊕ Q ⊕ R, not its negation. For example, when P = Q = R = 1 the MUX output is 1 but this expression would give 0, so this choice is incorrect."
          },
          {
            "id": 1,
            "text": "\\(P \\oplus Q \\oplus R\\)",
            "feedback": "Correct. With select inputs P and Q, the MUX chooses R when P and Q are equal (00 or 11) and chooses R̅ when P and Q differ (01 or 10). That makes the output equal to R ⊕ (P ⊕ Q), which by associativity of XOR is P ⊕ Q ⊕ R."
          },
          {
            "id": 2,
            "text": "\\(P+Q+R\\)",
            "feedback": "This is the OR of P, Q and R. The MUX output depends on R and R̅ selected by the pattern of P and Q, not a simple OR of the three variables. For instance, when P = Q = 1 and R = 0 the MUX output is 0 (bottom input R), but P + Q + R would be 1, so this option is incorrect."
          },
          {
            "id": 3,
            "text": "\\(\\overline{P+Q+R}\\)",
            "feedback": "This is the NOR of P, Q and R (the complement of the OR). The MUX does not implement NOR. For example, with P = Q = 1 and R = 0 the true MUX output is 0 while this expression would give 0 as well in that case, but other input combinations (e.g., P = 0, Q = 1, R = 0) differ — the MUX gives 1 while NOR would give 0. Thus this choice is incorrect."
          }
        ]
      },
      "answer": {
        "correctOption": 1,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key idea:  the two select lines P and Q choose either R or its complement, so the output is an XOR of the three signals. Map select values to inputs: with select bits (P,Q) = 00 the top input R is chosen; 01 chooses R̅; 10 chooses R̅; 11 chooses R. Write the sum-of-products from the MUX selection: f = P'Q'R + P'QR' + PQ'R' + PQR Factor by R and R': f = R(P'Q' + PQ) + R'(P'Q + PQ') Recognize the grouped terms: P'Q' + PQ = (P ⊕ Q)' (XNOR) and P'Q + PQ' = P ⊕ Q. Thus f = R·(P ⊕ Q)' + R'·(P ⊕ Q) = R ⊕ (P ⊕ Q). Using associativity of XOR, the final simplified expression is: f = P ⊕ Q ⊕ R",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3902,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subjectId": "68cbde4f61903cd7d6ed67c5",
        "topicId": "68cbe54861903cd7d6106896",
        "subtopicId": "68cbe8ad61903cd7d61f8f95"
      },
      "content": {
        "questionText": "P is a 16-bit signed integer. The 2’s complement representation of P is (F87B) 16 . The 2’s complement representation of 8*P is",
        "options": [
          {
            "id": 0,
            "text": "(C3D8) 16",
            "feedback": "Correct. Start by interpreting (F87B)16 as a 16-bit two's complement number. Invert F87B -> 0784, add 1 -> 0785 = 1925 decimal, so P = -1925. Multiply by 8: 8 * P = -15400. Convert 15400 to hex: 15400 = 0x3C28. Form the two's complement negative: invert 3C28 -> C3D7, add 1 -> C3D8. Therefore 8*P = (C3D8)16."
          },
          {
            "id": 1,
            "text": "(187B) 16",
            "feedback": "Incorrect. (187B)16 is not the two's complement representation of 8*P. The correct value is (C3D8)16. Key steps: (F87B)16 -> invert -> 0784, add 1 -> 0785 = 1925, so P = -1925. 8*P = -15400; 15400 = 0x3C28; two's complement of 3C28 is C3D8."
          },
          {
            "id": 2,
            "text": "(F878) 16",
            "feedback": "Incorrect. (F878)16 is not the representation of 8*P. Correct computation: (F87B)16 corresponds to P = -1925, so 8*P = -15400. 15400 in hex is 3C28; its two's complement is C3D8. Thus the correct 16-bit two's complement is (C3D8)16."
          },
          {
            "id": 3,
            "text": "(987B) 16",
            "feedback": "Incorrect. (987B)16 is not equal to 8*P. Work through the conversion: (F87B)16 -> magnitude 0x0785 = 1925, so P = -1925. 8*P = -15400; 15400 = 0x3C28. Two's complement of 3C28 is C3D8, so 8*P = (C3D8)16."
          }
        ]
      },
      "answer": {
        "correctOption": 0,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Step 1: Determine the signed value of P from (F87B)16. MSB is 1, so the number is negative in two's complement. Invert F87B -> 0784; add 1 -> 0785. 0x0785 = 1925 decimal, so P = -1925. Step 2: Compute 8 * P. 8 * (-1925) = -15400. Convert magnitude 15400 to hex: 15400 = 0x3C28. Take two's complement to represent the negative value: invert 3C28 -> C3D7, add 1 -> C3D8. Answer: The 16-bit two's complement representation of 8 * P is (C3D8)16. Note: The result fits within the 16-bit signed range (-32768 to 32767), so there is no overflow.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3900,
      "type": "MCQ",
      "difficulty": "ADVANCED",
      "topology": {
        "subjectId": "68cbde4f61903cd7d6ed67c5",
        "topicId": "68cbe1df61903cd7d602fd21",
        "subtopicId": "68cbe66e61903cd7d614b68c"
      },
      "content": {
        "questionText": "The minterm expansion of  \\(f(P, Q, R) = PQ + Q \\overline R + P \\overline R\\)  is",
        "options": [
          {
            "id": 0,
            "text": "\\( m_2 + m_4 + m_6  + m_7 \\)",
            "feedback": "Correct. Consider R = 0 and R = 1. When R = 0 (so R' = 1) the function reduces to P + Q, which is 1 for combinations 010 (m2), 100 (m4), and 110 (m6). When R = 1 (R' = 0) the function reduces to PQ, which is 1 only for 111 (m7). So the minterms are m2 + m4 + m6 + m7."
          },
          {
            "id": 1,
            "text": "\\( m_0 + m_1 + m_3  + m_5\\)",
            "feedback": "Incorrect. These minterms (m0, m1, m3, m5) are exactly the input combinations for which the function is 0, not 1. The function evaluates to 0 at 000 (m0), 001 (m1), 011 (m3), and 101 (m5)."
          },
          {
            "id": 2,
            "text": "\\( m_0+ m_1 + m_6  + m_7 \\)",
            "feedback": "Incorrect. This set wrongly includes m0 and m1 (where the function is 0) and misses m2 and m4. The correct minterms should be m2, m4, m6, and m7."
          },
          {
            "id": 3,
            "text": "\\( m_2 + m_3 + m_4  + m_5\\)",
            "feedback": "Incorrect. While this option includes m2 and m4 (which are correct), it also includes m3 and m5 where the function is 0, and it omits m6 and m7 which should be included."
          }
        ]
      },
      "answer": {
        "correctOption": 0,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key idea:  evaluate the function separately for R = 0 and R = 1 to find which input combinations make it 1. If R = 0 (so R' = 1): f = PQ + Q·1 + P·1 = PQ + Q + P = P + Q. Thus f = 1 for any combination with P = 1 or Q = 1, giving 010 (m2), 100 (m4), and 110 (m6). If R = 1 (so R' = 0): f = PQ + 0 + 0 = PQ. Thus f = 1 only for 111 (m7). Therefore  f(P, Q, R) = m2 + m4 + m6 + m7.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3898,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subjectId": "68d24e621c69bbb6f527dabb",
        "topicId": "68d24e9c1c69bbb6f5286721",
        "subtopicId": "68ee04bfb37e7ed7f47fa3d3"
      },
      "content": {
        "questionText": "Consider the set S = {1, ω, ω 2 }, where ω and ω 2  are cube roots of unity. If * denotes the multiplication operation, the structure (S, *) forms",
        "options": [
          {
            "id": 0,
            "text": "A group",
            "feedback": "Correct. (S, *) is a group. Check the group axioms: closure holds because products of 1, ω, ω^2 are again one of these (use ω^3 = 1); associativity holds because multiplication of complex numbers is associative; the identity is 1; each element has an inverse: 1^{-1}=1, ω^{-1}=ω^2, ω^2^{-1}=ω. Hence S is a cyclic (and therefore abelian) group of order 3 generated by ω."
          },
          {
            "id": 1,
            "text": "A ring",
            "feedback": "Incorrect. A ring requires two operations (addition and multiplication) and an additive identity (0). The structure given only specifies multiplication and does not include an additive operation or 0, so (S, *) is not a ring."
          },
          {
            "id": 2,
            "text": "An integral domain",
            "feedback": "Incorrect. An integral domain is a commutative ring with unity and no zero divisors. Since S under * lacks the required additive structure (and the additive identity 0), it cannot be considered an integral domain even though multiplication on S has no zero divisors."
          },
          {
            "id": 3,
            "text": "A field",
            "feedback": "Incorrect. A field requires both addition and multiplication with appropriate identities and inverses. Although every element of S has a multiplicative inverse, S does not provide an additive operation or additive identity, so it is not a field."
          }
        ]
      },
      "answer": {
        "correctOption": 0,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key idea:  verify the group axioms for (S, *) where S = {1, ω, ω2} and ω3 = 1. Closure: Multiplying any two elements from S yields one of 1, ω, ω2 (use ω·ω = ω2, ω·ω2 = ω3 = 1, etc.). Associativity: Inherited from associative multiplication of complex numbers. Identity: 1 acts as the multiplicative identity. Inverses: Each element has an inverse in S (1^{-1}=1, ω^{-1}=ω2, ω2^{-1}=ω). Conclusion: These facts show (S, *) is a group. It is cyclic of order 3 (generated by ω) and abelian.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3897,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subjectId": "68d24e621c69bbb6f527dabb",
        "topicId": "68d24e7b1c69bbb6f52844e1",
        "subtopicId": "68d24f0d1c69bbb6f529408f"
      },
      "content": {
        "questionText": "What is the possible number of reflexive relations on a set of 5 elements?",
        "options": [
          {
            "id": 0,
            "text": "2^{10}",
            "feedback": "Incorrect. The text \"2 10\" seems to represent 2^{10}, but for a 5-element set there are 5×5 = 25 ordered pairs. A reflexive relation must include the 5 diagonal pairs, leaving 20 pairs that can be chosen freely. The correct count is 2^{20}, not 2^{10}."
          },
          {
            "id": 1,
            "text": "2^{15}",
            "feedback": "Incorrect. The text \"2 15\" appears to mean 2^{15}, but the number of free choices after enforcing reflexivity is 20 (not 15). Since there are 25 ordered pairs and the 5 diagonal pairs must be included, the number of reflexive relations is 2^{20}."
          },
          {
            "id": 2,
            "text": "2^{20}",
            "feedback": "Correct. The text \"2 20\" denotes 2^{20}. There are 25 ordered pairs on a 5-element set; reflexivity forces the 5 diagonal pairs to be present, leaving 20 pairs that may each be included or excluded. Thus there are 2^{20} = 1,048,576 reflexive relations."
          },
          {
            "id": 3,
            "text": "2^{25}",
            "feedback": "Incorrect. The text \"2 25\" would represent 2^{25}, which counts all possible relations on a 5-element set (because there are 25 ordered pairs) but does not enforce reflexivity. Requiring the 5 diagonal pairs to be present reduces the number of free choices to 20, so the correct count for reflexive relations is 2^{20}."
          }
        ]
      },
      "answer": {
        "correctOption": 2,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Answer:  There are 2^{20} = 1,048,576 reflexive relations on a 5-element set. Key insight:  Count total ordered pairs, fix diagonal pairs required by reflexivity, and count choices for the remaining pairs. Total ordered pairs on a 5-element set: 5 × 5 = 25. Reflexivity requires the 5 diagonal pairs (a,a) for each element to be included, so those are fixed. Remaining pairs: 25 − 5 = 20. Each of these 20 pairs can either be included or excluded independently, giving 2^{20} possibilities.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3895,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subjectId": "68d24e621c69bbb6f527dabb",
        "topicId": "68d24e8eb905a26b8ed9c0f3",
        "subtopicId": "68ee03fd63a6aa4cca38983e"
      },
      "content": {
        "questionText": "Let  \\(G=(V, E)\\)  be a graph. Define  \\(\\xi(G) = \\sum\\limits_d i_d*d\\)  , where id is the number of vertices of degree  \\(d\\)  in  \\(G\\) . If  \\(S\\)  and  \\(T\\)  are two different trees with  \\(\\xi(S) = \\xi(T)\\)  , then",
        "options": [
          {
            "id": 0,
            "text": "\\(|S| = 2|T| \\)",
            "feedback": "Incorrect. For any tree with n vertices, xi(G) equals the sum of vertex degrees, which is 2|E|. In a tree |E| = n - 1, so xi = 2(n - 1). If xi(S) = xi(T) then 2(|S| - 1) = 2(|T| - 1), so |S| = |T|. The relation |S| = 2|T| does not follow and is generally false."
          },
          {
            "id": 1,
            "text": "\\(|S| = |T|  - 1\\)",
            "feedback": "Incorrect. Using xi(G) = sum of degrees = 2|E| and |E| = |V| - 1 for a tree gives xi = 2(|V| - 1). From xi(S) = xi(T) we get 2(|S| - 1) = 2(|T| - 1), so |S| = |T|. Thus |S| = |T| - 1 is not true in general."
          },
          {
            "id": 2,
            "text": "\\(|S| = |T| \\)",
            "feedback": "Correct. Key fact: xi(G) is the sum of degrees, which equals 2|E|. For a tree with |V| vertices, |E| = |V| - 1, so xi = 2(|V| - 1). If xi(S) = xi(T), then 2(|S| - 1) = 2(|T| - 1), hence |S| = |T|."
          },
          {
            "id": 3,
            "text": "\\(|S| = |T|  + 1\\)",
            "feedback": "Incorrect. As with the other incorrect choices, compute xi for a tree: xi = 2(|V| - 1). Equating xi(S) and xi(T) gives |S| = |T|, so |S| = |T| + 1 is not generally true."
          }
        ]
      },
      "answer": {
        "correctOption": 2,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key idea:  express xi(G) in terms of the number of vertices for a tree. For any graph G, xi(G) = sum of degrees of all vertices = 2|E|. For a tree with |V| vertices, |E| = |V| - 1, so xi = 2(|V| - 1). If xi(S) = xi(T), then 2(|S| - 1) = 2(|T| - 1), which simplifies to |S| = |T|. Therefore, the two trees must have the same number of vertices.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3882,
      "type": "MCQ",
      "difficulty": "EXPERT",
      "topology": {
        "subjectId": "68da217e31f60703d61408e4",
        "topicId": "68da22bc31f60703d6169971",
        "subtopicId": "68da338e5e8ee4416b6fbb51"
      },
      "content": {
        "questionText": "Consider a network with five nodes, N1 to N5, as shown as below.  The network uses a Distance Vector Routing protocol. Once the routes have been stabilized, the distance vectors at different nodes are as follows. N1 : (0,1,7,8,4) N2 : (1,0,6,7,3) N3 : (7,6,0,2,6) N4 : (8,7,2,0,4) N5 : (4,3,6,4,0) Each distance vector is the distance of the best known path at that instance to nodes, N1 to N5, where the distance to itself is 0. Also, all links are symmetric and the cost is identical in both directions. In each round, all nodes exchange their distance vectors with their respective neighbors. Then all nodes update their distance vectors. In between two rounds, any change in cost of a link will cause the two incident nodes to change only that entry in their distance vectors. he cost of link N2−N3 reduces to 2 (in both directions). After the next round of updates, the link N1−N2 goes down. N2 will reflect this change immediately in its distance vector as cost, ∞. After the  NEXT ROUND  of update, what will be the cost to N1 in the distance vector of N3 ?",
        "options": [
          {
            "id": 0,
            "text": "3",
            "feedback": "Incorrect. A cost of 3 is not possible from N3 to N1 after these changes. After the link changes, the only neighbors N3 can use are N2 and N4; neither provides a path of total cost 3 to N1. Recompute possible paths from N3 (see solution): the shortest finite path becomes 10."
          },
          {
            "id": 1,
            "text": "9",
            "feedback": "Incorrect. A cost of 9 would require an intermediate node reporting a cost of 7 to N1 plus N3's link cost 2 to that intermediate node. In the given vectors, N4 reports cost 8 to N1, so via N4 the total is 2 + 8 = 10, not 9. Re-evaluate each neighbor's reported cost when choosing the minimum."
          },
          {
            "id": 2,
            "text": "10",
            "feedback": "Correct. After the link N2–N3 was reduced to 2, N3's distance to N2 is 2. When N1–N2 goes down and N2 sets its cost to N1 as infinity, N3 will consider both neighbors: via N2 the cost is 2 + infinity = infinity; via N4 the cost is 2 (N3→N4) + 8 (N4's reported cost to N1) = 10. The minimum finite cost is 10, so N3 records 10 for N1."
          },
          {
            "id": 3,
            "text": "∞",
            "feedback": "Incorrect. Although N2 sets its cost to N1 as infinity immediately after the link breaks, N3 still has an alternate neighbor (N4) that reports a finite cost to N1. Therefore N3 will pick the finite route through N4 (2 + 8 = 10) instead of infinity."
          }
        ]
      },
      "answer": {
        "correctOption": 2,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Answer: 10 Reasoning (step by step): When the link N2–N3 cost reduces to 2, only N2 and N3 update their entry for each other. So immediately after that change N3's known cost to N2 is 2. Next, the link N1–N2 goes down and N2 sets its cost to N1 to infinity in its distance vector. After the next round of updates, N3 receives neighbor information and recomputes its cost to N1 by taking the minimum over paths via its neighbors (N2 and N4). Via N2: cost(N3→N2) = 2, N2's reported cost to N1 = infinity ⇒ total = infinity. Via N4: cost(N3→N4) = 2, N4's reported cost to N1 = 8 (from the given vectors) ⇒ total = 2 + 8 = 10. Take the minimum finite cost: min(infinity, 10) = 10. Therefore N3's distance to N1 becomes 10. Note: This example shows how a node chooses an alternate finite route when a previously used neighbor reports the destination as unreachable (infinity).",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3880,
      "type": "MCQ",
      "difficulty": "ADVANCED",
      "topology": {
        "subjectId": "68cbde4f61903cd7d6ed67c5",
        "topicId": "68cbe53661903cd7d61055d2",
        "subtopicId": "68cbe7ed61903cd7d61be4b0"
      },
      "content": {
        "questionText": "Consider the following circuit involving three D-type flip-flops used in a certain type of counter configuration.  If all the flip-flops were reset to 0 at power on, what is the total number of distinct outputs (states) represented by  \\(PQR\\)  generated by the counter?",
        "options": [
          {
            "id": 0,
            "text": "3",
            "feedback": "3 is incorrect. With three flip-flops the circuit could produce up to 8 different states, but the specific feedback connections restrict which states occur. The easiest way to see this is to make a next-state table and simulate from the reset state 000. Tracing the circuit starting at 000 shows a repeating sequence of four distinct states (listed in the solution). Because the sequence length is 4, the counter does not produce only 3 distinct outputs."
          },
          {
            "id": 1,
            "text": "4",
            "feedback": "4 is correct. Starting from the reset state 000 and evaluating the combinational logic feeding each D input on each clock transition produces the sequence 000 -> 001 -> 011 -> 010 -> 000. There are four distinct states in the cycle, so the counter generates 4 unique PQR outputs."
          },
          {
            "id": 2,
            "text": "5",
            "feedback": "5 is incorrect. The circuit is deterministic: every current PQR maps to exactly one next PQR. By listing all next states and starting from 000 you will find a closed cycle that contains only four distinct states. Because the states revisit after four transitions, there is no way for the circuit to produce five different states in sequence starting from reset."
          },
          {
            "id": 3,
            "text": "6",
            "feedback": "6 is incorrect. Although three flip-flops can represent 8 combinations, the feedback logic prevents many combinations from appearing. Construct a next-state table from the shown gates and simulate from 000; you will observe the states repeat after four unique entries, so six distinct states do not occur."
          }
        ]
      },
      "answer": {
        "correctOption": 1,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Approach:  Determine the next-state for PQR on each clock by evaluating the combinational gates shown in the diagram using the current P,Q,R values. Then start from the reset state 000 and step through clock transitions until a previously seen state appears. State transitions (starting from reset 000): 000 → 001 001 → 011 011 → 010 010 → 000 Conclusion:  The circuit cycles through the four distinct states 000, 001, 011 and 010 and then returns to 000. Therefore the total number of distinct outputs represented by PQR produced by this counter is 4. Tip for verification: Make a two-column next-state table listing each current PQR and the resulting next PQR, obtaining the mapping for all eight combinations. Starting from 000, follow the mapping until a repeat state is reached; the number of distinct states seen before repetition is the cycle length.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3878,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subjectId": "68da428f31f60703d6614943",
        "topicId": "68da42a75e8ee4416b955c9b",
        "subtopicId": "68da433631f60703d661d814"
      },
      "content": {
        "questionText": "Consider the following recursive C function that takes two arguments. \n\nunsigned int foo(unsigned int n, unsigned int r) {\n\n    if (n>0) return ((n%r) + foo(n/r, r));\n\n    else return 0;\n\n} What is the return value of the function  foo  when it is called as  foo(513, 2) ?",
        "options": [
          {
            "id": 0,
            "text": "9",
            "feedback": "Incorrect. The function adds the remainders when repeatedly dividing by 2, which counts the number of 1 bits in the binary representation of n. 513 in binary is 1000000001, which has two 1s, not nine. The value 9 might come from mistakenly summing the decimal digits (5+1+3=9), but that's not what this function does."
          },
          {
            "id": 1,
            "text": "8",
            "feedback": "Incorrect. 8 is not the result. The function returns the sum of n%2 at each step (only 0 or 1 values), so it equals the count of 1 bits in n. For 513 that count is 2. 8 could come from a miscounting error, but it is not supported by the actual remainders."
          },
          {
            "id": 2,
            "text": "5",
            "feedback": "Incorrect. 5 is not correct. A likely mistake is miscounting the number of 1 bits when repeatedly dividing by 2. The correct process gives two 1 bits for 513, so the correct return value is 2."
          },
          {
            "id": 3,
            "text": "2",
            "feedback": "Correct. When r = 2, each n%2 yields 0 or 1 and the function sums those values as n is repeatedly integer-divided by 2. That sum is exactly the number of 1s in the binary representation of n. 513 = 512 + 1 so its binary form is 1000000001, which has two 1s. Therefore foo(513, 2) returns 2."
          }
        ]
      },
      "answer": {
        "correctOption": 3,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key idea:  for r = 2, the function returns the sum of n%2 at each step while repeatedly doing n = n/2. That sum equals the number of 1 bits in n's binary representation. Compute successive remainders for n = 513: 513 % 2 = 1 → n becomes 256 256 % 2 = 0 → 128 % 2 = 0 → 64 % 2 = 0 → 32 % 2 = 0 → 16 % 2 = 0 → 8 % 2 = 0 → 4 % 2 = 0 → 2 % 2 = 0 1 % 2 = 1 → then n becomes 0 and recursion stops Add the remainders: 1 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1 = 2. Conclusion: foo(513, 2) returns 2.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3875,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subjectId": "68d38ec66dbf3983bc810cd9",
        "topicId": "68d38f386dbf3983bc828e43",
        "subtopicId": "68d396326dbf3983bc8d5849"
      },
      "content": {
        "questionText": "Database table by name  Loan_Records  is given below. \\(\\begin{array}{|c|c|c|} \\hline \\textbf {Borrower} & \\textbf {Bank_Manager} &\\textbf {Loan_Amount} \\\\\\hline  \\text{Ramesh }& \\text{Sunderajan} & 10000.00 \\\\\\hline \\text{Suresh} & \\text{Ramgopal} & 5000.00 \\\\\\hline \\text{Mahesh} & \\text{Sunderajan} & 7000.00\\\\\\hline \\end{array}\\) What is the output of the following SQL query? \n\nSELECT count(*)\n\nFROM (\n\n    SELECT Borrower, Bank_Manager FROM Loan_Records) AS S \n\n    NATURAL JOIN\n\n    (SELECT Bank_Manager, Loan_Amount FROM Loan_Records) AS T\n\n);",
        "options": [
          {
            "id": 0,
            "text": "3",
            "feedback": "Incorrect. A result of 3 would be the original number of rows in the table, but the NATURAL JOIN pairs rows that share the same Bank_Manager and can produce more rows than the original table. Count the matching pairs by Bank_Manager to get the correct total."
          },
          {
            "id": 1,
            "text": "9",
            "feedback": "Incorrect. A result of 9 would be the full Cartesian product of the two subqueries (3×3), which would occur only if there were no common column to match on. Because both subqueries include Bank_Manager, NATURAL JOIN matches on that column and yields fewer rows."
          },
          {
            "id": 2,
            "text": "5",
            "feedback": "Correct. NATURAL JOIN matches rows by Bank_Manager. Sunderajan appears twice in each subquery (2×2 = 4 resulting rows) and Ramgopal appears once in each (1×1 = 1 row). Total rows after the join = 4 + 1 = 5, so count(*) = 5."
          },
          {
            "id": 3,
            "text": "6",
            "feedback": "Incorrect. A result of 6 is not produced by this join. The join multiplies rows that share the same Bank_Manager: Sunderajan gives 4 rows and Ramgopal gives 1 row, totaling 5. 6 would require a different distribution of matches."
          }
        ]
      },
      "answer": {
        "correctOption": 2,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Correct result: 5. Explanation: The two subqueries both include the column Bank_Manager, so NATURAL JOIN matches rows on Bank_Manager. Each matching pair becomes a row in the join result. Bank_Manager = Sunderajan: appears twice in the first subquery (Borrower = Ramesh, Mahesh) and twice in the second subquery (Loan_Amount = 10000.00, 7000.00), so 2 × 2 = 4 joined rows. Bank_Manager = Ramgopal: appears once in each subquery (Suresh and 5000.00), so 1 × 1 = 1 joined row. Total rows after the NATURAL JOIN = 4 + 1 = 5, so SELECT count(*) returns 5.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3868,
      "type": "MCQ",
      "difficulty": "ADVANCED",
      "topology": {
        "subjectId": "68d38ec66dbf3983bc810cd9",
        "topicId": "68d38f2f6dbf3983bc828bf0",
        "subtopicId": "68d395a66dbf3983bc8c6d20"
      },
      "content": {
        "questionText": "Consider a relational table  \\(r\\)  with sufficient number of records, having attributes  \\(A_1, A_2, \\dots ,A_n\\)  and let  \\(1 \\leq p \\leq n\\) . Two queries  \\(Q1\\)  and  \\(Q2\\)  are given below. \\(Q1: \\pi_{A_1, \\dots ,A_p} \\left(\\sigma_{A_p=c}\\left(r\\right)\\right)\\)  where  \\(c\\)  is a constant \\(Q2: \\pi_{A_1, \\dots ,A_p} \\left(\\sigma_{c_1 \\leq A_p \\leq c_2}\\left(r\\right)\\right)\\)  where  \\(c_1\\)  and  \\(c_2\\)  are constants. The database can be configured to do ordered indexing on  \\(A_p\\)  or hashing on  \\(A_p\\) . Which of the following statements is  TRUE ?",
        "options": [
          {
            "id": 0,
            "text": "Ordered indexing will always outperform hashing for both queries",
            "feedback": "This statement is incorrect. Ordered indexing is good for range queries because it supports scanning keys in order, but it is not always faster than hashing for equality queries. For an equality selection on the indexed attribute, hashing typically finds matching records with expected O(1) cost, while an ordered index (B-tree) needs O(log n) to locate the key. Therefore saying ordered indexing will always outperform hashing for both queries is false."
          },
          {
            "id": 1,
            "text": "Hashing will always outperform ordered indexing for both queries",
            "feedback": "This statement is incorrect. Hashing is excellent for exact-match (equality) lookups because it can directly locate the bucket for a key, but hashing cannot support efficient range queries because hash order does not preserve key ordering. For a range selection, an ordered index (e.g., a B-tree) can perform a range scan efficiently while hashing would require scanning many buckets or the entire relation."
          },
          {
            "id": 2,
            "text": "Hashing will outperform ordered indexing on  \\(Q1\\) , but not on  \\(Q2\\)",
            "feedback": "This statement is correct. For the equality query where A_p = c, hashing outperforms ordered indexing in typical implementations because hashing can directly locate the matching bucket (expected O(1) cost), while an ordered index needs O(log n) to find the key. For the range query where c1 ≤ A_p ≤ c2, hashing cannot produce the keys in order and therefore cannot support an efficient range scan; an ordered index supports range scans efficiently (O(log n + k) where k is number of matches). Note the usual caveats: if there are many duplicates or the selection returns a large fraction of the table, both approaches end up doing many I/Os; clustered vs unclustered indexes and data distribution can affect actual costs."
          },
          {
            "id": 3,
            "text": "Hashing will outperform ordered indexing on  \\(Q2\\) , but not on  \\(Q1\\)",
            "feedback": "This statement is incorrect. It reverses the typical performance characteristics: hashing is not suitable for range queries because hash functions do not preserve order, so hashing will not outperform ordered indexing on a range selection. For equality queries, hashing usually outperforms ordered indexing. Therefore the claim that hashing will outperform ordered indexing on the range query but not on the equality query is wrong."
          }
        ]
      },
      "answer": {
        "correctOption": 2,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Correct answer: Hashing will outperform ordered indexing on the equality query, but not on the range query. Why: Equality query (A_p = c):  Hashing is faster . A hash index maps the search key to a bucket, allowing expected O(1) lookup of matching records. An ordered index (e.g., B-tree) needs O(log n) to locate the key and then access matching entries. Range query (c1 ≤ A_p ≤ c2):  Ordered indexing is appropriate . An ordered index supports range scans efficiently by locating the start key and scanning in order (cost roughly O(log n + k), where k is the number of matching entries). Hash indexes do not preserve key order and cannot support an efficient range scan, so they would require examining many buckets or fall back to a full scan. Practical caveats: If the equality query returns many matching records (low cardinality of A_p), both methods may require many I/Os to fetch the tuples; the relative advantage of hashing is smaller for heavy-result queries. Clustered vs unclustered indexes, data distribution, and implementation details affect actual performance, but they do not change the fundamental point that hashing supports exact-match efficiently while ordered indexes support range scans.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3861,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subjectId": "68d38ec66dbf3983bc810cd9",
        "topicId": "68d38f386dbf3983bc828e43",
        "subtopicId": "68d395ca6dbf3983bc8c7965"
      },
      "content": {
        "questionText": "Consider a database table T containing two columns X and Y each of type integer. After the creation of the table, one record (X=1, Y=1) is inserted in the table. Let MX and MY denote the respective maximum values of X and Y among all records in the table at any point in time. Using MX and MY, new records are inserted in the table 128 times with X and Y values being MX+1, 2*MY+1 respectively. It may be noted that each time after the insertion, values of MX and MY change. What will be the output of the following SQL query after the steps mentioned above are carried out? \n\nSELECT Y FROM T WHERE X=7;",
        "options": [
          {
            "id": 0,
            "text": "127",
            "feedback": "Correct. Each insert sets X = previous MX + 1, so the inserts produce X = 2, 3, 4, ... . The record with X = 7 is created on the 6th insert (starting from the initial X = 1). Y follows the recurrence Y_next = 2*Y_current + 1 with initial Y = 1, which gives Y after 6 inserts as 2^(6+1) - 1 = 127."
          },
          {
            "id": 1,
            "text": "255",
            "feedback": "Incorrect. 255 equals 2^8 - 1, which would be the Y value after 7 inserts (i.e., when the newly inserted X would be 8), not the Y value for X = 7. The record with X = 7 is created on the 6th insert and yields Y = 127."
          },
          {
            "id": 2,
            "text": "129",
            "feedback": "Incorrect. 129 is the final maximum X after 128 inserts (initial 1 plus 128 inserts gives MX = 129), so it might be confused with an X value. It is not the Y value for the record where X = 7. The Y for X = 7 is 127."
          },
          {
            "id": 3,
            "text": "257",
            "feedback": "Incorrect. 257 is not generated by the recurrence Y_next = 2*Y_current + 1 at the point when X = 7. The recurrence produces values of the form 2^{n+1}-1, and for the insert that creates X = 7 (the 6th insert) that value is 127."
          }
        ]
      },
      "answer": {
        "correctOption": 0,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key insight:  each new record increases MX by 1 and sets Y = 2*previous_MY + 1. X values generated by the inserts are 2, 3, 4, ..., 1 + number_of_inserts. The record with X = 7 is created on the 6th insert (since initial X = 1). Y follows the recurrence Y_{n} = 2*Y_{n-1} + 1 with initial Y_0 = 1. This solves to Y_{n} = 2^{n+1} - 1 after n inserts. For the record with X = 7 we have n = 6 inserts, so Y = 2^{7} - 1 = 128 - 1 = 127. Therefore SELECT Y FROM T WHERE X = 7 returns 127.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3859,
      "type": "MCQ",
      "difficulty": "ADVANCED",
      "topology": {
        "subjectId": "68d24e621c69bbb6f527dabb",
        "topicId": "68d24eab1c69bbb6f52867db",
        "subtopicId": "68d25155b905a26b8edec702"
      },
      "content": {
        "questionText": "Which one of the following options is CORRECT given three positive integers  \\(x,y\\)  and  \\(z\\) , and a predicate \\(P\\left(x\\right) = \\neg \\left(x=1\\right)\\wedge \\forall y \\left(\\exists z\\left(x=y*z\\right) \\Rightarrow \\left(y=x\\right) \\vee \\left(y=1\\right) \\right)\\)",
        "options": [
          {
            "id": 0,
            "text": "\\(P(x)\\)  being true means that  \\(x\\)  is a prime number",
            "feedback": "Correct. The predicate requires x≠1 and that every y which satisfies ∃z (x = y*z) (i.e. every positive divisor y of x) must be either 1 or x. That exactly matches the definition of a prime number (an integer greater than 1 with no divisors other than 1 and itself). For example, x=7 satisfies the predicate, while composite numbers do not."
          },
          {
            "id": 1,
            "text": "\\(P(x)\\)  being true means that  \\(x\\)  is a number other than",
            "feedback": "Incorrect and incomplete. While P(x) does include ¬(x=1) (so x is not 1), it also requires that any divisor y of x must be 1 or x. Together these conditions mean x is prime, not merely 'a number other than ...'. The option's text is unfinished and misses the divisibility condition."
          },
          {
            "id": 2,
            "text": "\\(P(x)\\)  is always true irrespective of the value of  \\(x\\)",
            "feedback": "Incorrect. P(x) is not always true. It fails for x=1 because ¬(x=1) is false, and it fails for composite numbers because there exists a divisor y (neither 1 nor x) that violates the universal condition (for example x=4 with y=2)."
          },
          {
            "id": 3,
            "text": "\\(P(x)\\)  being true means that  \\(x\\)  has exactly two factors other than 1 and  \\(x\\)",
            "feedback": "Incorrect. P(x) requires that there are no divisors of x other than 1 and x (i.e. zero 'other' factors). This option claims there are exactly two other factors, which describes numbers like 6 (divisors 1,2,3,6) and therefore contradicts P(x)."
          }
        ]
      },
      "answer": {
        "correctOption": 0,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key idea:  interpret the predicate P(x) in plain language. The predicate is  ¬(x = 1) ∧ ∀y ( (∃z (x = y*z)) ⇒ (y = x ∨ y = 1) ). ¬(x = 1) means x is not 1, and since x is a positive integer this means x > 1. ∀y ( (∃z (x = y*z)) ⇒ (y = x ∨ y = 1) ) says: every y that divides x must be either 1 or x; in other words, x has no divisors other than 1 and itself. Combining these points, P(x) holds exactly for positive integers greater than 1 that have no divisors other than 1 and themselves — that is the definition of a prime number. Examples and counterexamples: x = 7 satisfies P(x): 7 ≠ 1 and its only positive divisors are 1 and 7. x = 1 does not satisfy P(x) because ¬(x = 1) fails. x = 4 does not satisfy P(x) because 2 divides 4 and 2 is neither 1 nor 4. Conclusion: The correct interpretation of P(x) is that x is a prime number. Note: Any statement claiming that P(x) means x has extra factors other than 1 and x, or that P(x) holds for all x, is false.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3855,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subjectId": "68ef5e1592de3c0ee0571f26",
        "topicId": "68ef5edfb8e4ae034915b098",
        "subtopicId": "68ef6232b8e4ae03491a0880"
      },
      "content": {
        "questionText": "Consider the languages  \\(L1, \\:L2 \\)  and  \\( L3\\)  as given below. \\(L1=\\{0^p 1^q \\mid p, q \\in N\\},\\\\ L2 = \\{0^p 1^q \\mid p, q \\in N \\:and \\:p=q\\} \\: and, \\\\ L3 = \\{0^p 1^q 0^r \\mid p, q, r \\in N\\: and \\: p=q=r\\}.\\) Which of the following statements is  NOT TRUE ?",
        "options": [
          {
            "id": 0,
            "text": "Push Down Automata (PDA) can be used to recognize  \\(L_1\\)  and  \\(L_2\\)",
            "feedback": "This is true. A pushdown automaton can recognize L1 because every regular language can be recognized by a PDA (L1 is regular). A PDA also recognizes L2 = {0^p 1^p}, which is the standard example of a context-free language recognized by a PDA."
          },
          {
            "id": 1,
            "text": "\\(L_1\\)  is a regular language",
            "feedback": "This is true. L1 = {0^p 1^q | p,q ∈ N} is described by the regular expression 0*1*, so it is a regular language (and hence context-free as well)."
          },
          {
            "id": 2,
            "text": "All the three languages are context free",
            "feedback": "This is NOT true. While L1 and L2 are context-free, L3 = {0^p 1^q 0^r | p=q=r} (which is {0^n 1^n 0^n}) is not context-free. A standard pumping-lemma or closure-argument shows that no context-free grammar can enforce equality of three separate block counts, so L3 is not context-free."
          },
          {
            "id": 3,
            "text": "Turing machines can be used to recognize all the languages",
            "feedback": "This is true. A Turing machine can recognize (and decide) all three languages: it can simulate a finite automaton or a PDA, and in particular can decide membership for L1, L2 and L3 by straightforward algorithms."
          }
        ]
      },
      "answer": {
        "correctOption": 2,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Correct answer: The statement \"All the three languages are context free\" is not true. L1:  L1 = 0*1*  is regular (e.g., regex 0*1*), so it is context-free and recognizable by a PDA. L2:  L2 = {0^n1^n}  is a standard context-free language (grammar S → 0S1 | ε) and is recognized by a PDA. L3:  L3 = {0^n1^n0^n}  is not context-free. By the pumping lemma for CFLs (or standard closure arguments), any decomposition of s = 0^n1^n0^n with the required constraints leads to a pumped string that breaks the three-way equality, so no CFG can generate L3. Therefore the given statement is false because L3 is not context-free; the other statements (about PDA recognition, L1 being regular, and Turing machines recognizing all languages) are true.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3846,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subjectId": "68d24e621c69bbb6f527dabb",
        "topicId": "68d24e8eb905a26b8ed9c0f3",
        "subtopicId": "68d2505cb905a26b8edc46da"
      },
      "content": {
        "questionText": "K4 and Q3 are graphs with the following structures.  Which one of the following statements is  TRUE  in relation to these graphs?",
        "options": [
          {
            "id": 0,
            "text": "K4 is a planar while Q3 is not",
            "feedback": "This statement is incorrect. K4 is planar — it can be drawn without crossings (for example, as a triangle with the fourth vertex placed inside and connected to the three outer vertices). Q3 (the 3-dimensional cube graph) is also planar — it is the planar skeleton of a cube and can be drawn in the plane without edge crossings. So it is not true that K4 is planar while Q3 is not."
          },
          {
            "id": 1,
            "text": "Both K4 and Q3 are planar",
            "feedback": "This statement is correct. K4 is planar (it admits a drawing with no edge crossings; e.g., place one vertex inside a triangle formed by the other three). Q3 is planar because it is the cube graph and can be drawn in the plane without crossings (it is the planar skeleton of a cube). Both graphs satisfy Euler's formula for planar embeddings and do not contain K5 or K3,3 subdivisions that would force nonplanarity."
          },
          {
            "id": 2,
            "text": "Q3 is planar while K4 is not",
            "feedback": "This statement is incorrect. Q3 is planar, but K4 is also planar — so it is wrong to say K4 is not planar. K4 can be embedded without crossings (for instance as a triangle with the fourth vertex inside), and Q3 can be embedded as the planar drawing of a cube."
          },
          {
            "id": 3,
            "text": "Neither K4 nor Q3 is planar",
            "feedback": "This statement is incorrect. Both K4 and Q3 are planar graphs. Neither contains a subdivision of K5 or K3,3 that would force nonplanarity. In particular, K4 has a well-known planar embedding and Q3 is the planar cube graph."
          }
        ]
      },
      "answer": {
        "correctOption": 1,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key idea:  determine whether each graph can be drawn in the plane without edge crossings. K4: The complete graph on four vertices has v = 4 and e = 6. It admits a planar embedding (for example, draw a triangle for three vertices and place the fourth vertex inside, connecting it to the three outer vertices). Euler's formula holds (v − e + f = 2) with f = 4, so K4 is planar. Q3: The 3-cube (cube graph) has v = 8 and e = 12 and is the skeleton of a cube. It can be drawn in the plane without crossings (the usual planar drawing of a cube), and Euler's formula holds with f = 6. Therefore Q3 is planar. Conclusion: Both K4 and Q3 are planar graphs, so the correct statement is that both graphs are planar.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3844,
      "type": "MCQ",
      "difficulty": "BEGINNER",
      "topology": {
        "subjectId": "68cbde4f61903cd7d6ed67c5",
        "topicId": "68cbe53661903cd7d61055d2",
        "subtopicId": "68cbe7ed61903cd7d61be4b0"
      },
      "content": {
        "questionText": "The minimum number of D flip-flops needed to design a mod-258 counter is",
        "options": [
          {
            "id": 0,
            "text": "9",
            "feedback": "Correct. We need the smallest integer n with 2^n ≥ 258. Since 2^8 = 256 < 258 and 2^9 = 512 ≥ 258, 9 flip-flops are required."
          },
          {
            "id": 1,
            "text": "8",
            "feedback": "Incorrect. Eight flip-flops provide 2^8 = 256 distinct states, which is fewer than the required 258 states, so 8 is insufficient."
          },
          {
            "id": 2,
            "text": "512",
            "feedback": "Incorrect. 512 is the number of states available with 9 flip-flops (2^9 = 512), not the number of flip-flops themselves. The question asks for the minimum number of flip-flops, which is 9."
          },
          {
            "id": 3,
            "text": "258",
            "feedback": "Incorrect. 258 is the number of distinct states required, but the number of flip-flops must satisfy 2^n ≥ 258. That inequality gives n = 9, not 258."
          }
        ]
      },
      "answer": {
        "correctOption": 0,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key idea:  find the smallest integer n such that 2^n ≥ 258. Check n = 8: 2^8 = 256, which is less than 258. Check n = 9: 2^9 = 512, which is greater than or equal to 258. Conclusion: the minimum number of D flip-flops required is 9. (There will be 512 − 258 = 254 unused states that should be handled in the design.)",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3843,
      "type": "MCQ",
      "difficulty": "ADVANCED",
      "topology": {
        "subjectId": "68cbde4f61903cd7d6ed67c5",
        "topicId": "68cbe51b61903cd7d6104237",
        "subtopicId": "68ee1e9463a6aa4cca714915"
      },
      "content": {
        "questionText": "The simplified SOP (Sum of Product) from the Boolean expression  \\((P + \\bar{Q} + \\bar{R}) . (P + \\bar{Q} + R) . (P + Q +\\bar{R})\\)  is",
        "options": [
          {
            "id": 0,
            "text": "\\((\\bar{P}.Q+\\bar{R})\\)",
            "feedback": "Incorrect. The expression simplifies to P + ¬Q·¬R, not (¬P·Q + ¬R). A quick counterexample: let P=1, Q=0, R=1. The original product is 1, but (¬P·Q + ¬R) evaluates to 0, so this option is wrong."
          },
          {
            "id": 1,
            "text": "\\((P+\\bar{Q}.\\bar{R})\\)",
            "feedback": "Correct. Use the identity (X+Y)(X+Z)=X+YZ: (P+¬Q+¬R)(P+¬Q+R) = (P+¬Q). Then (P+¬Q)(P+Q+¬R) = P + ¬Q·¬R, because (P+Y)(P+Z)=P+YZ and ¬Q·(Q+¬R)=¬Q·¬R."
          },
          {
            "id": 2,
            "text": "\\((\\bar{P}.Q+R)\\)",
            "feedback": "Incorrect. (¬P·Q + R) does not match the simplified result P + ¬Q·¬R. Counterexample: P=1, Q=0, R=0 makes the original expression 1, while (¬P·Q + R) evaluates to 0, so this option is wrong."
          },
          {
            "id": 3,
            "text": "\\((P.Q+R)\\)",
            "feedback": "Incorrect. (P·Q + R) differs from the correct simplification P + ¬Q·¬R. For example, with P=1, Q=0, R=0 the original expression is 1 but (P·Q + R) evaluates to 0, so this option is not correct."
          }
        ]
      },
      "answer": {
        "correctOption": 1,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Simplified result:  P + ¬Q·¬R Step 1: Use (X+Y)(X+Z) = X + YZ with X = (P+¬Q), Y = ¬R, Z = R to simplify (P+¬Q+¬R)(P+¬Q+R) to (P+¬Q). Step 2: Apply (X+Y)(X+Z) = X + YZ again with X = P, Y = ¬Q, Z = (Q+¬R): This gives P + ¬Q·(Q + ¬R) = P + (¬Q·Q) + (¬Q·¬R) = P + 0 + ¬Q·¬R = P + ¬Q·¬R. Therefore the simplified SOP form is P + ¬Q·¬R.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3841,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subjectId": "68d38ec66dbf3983bc810cd9",
        "topicId": "68d38f05d857e762192d7376",
        "subtopicId": "68ee91c82f14c61fb04d1365"
      },
      "content": {
        "questionText": "Consider a relational table with a single record for each registered student with the following attributes: Registration_Num : Unique registration number for each registered student UID : Unique identity number, unique at the national level for each citizen BankAccount_Num : Unique account number at the bank. A student can have multiple accounts or joint accounts. This attribute stores the primary account number. Name : Name of the student Hostel_Room : Room number of the hostel Which of the following options is  INCORRECT ?",
        "options": [
          {
            "id": 0,
            "text": "BankAccount_Num  is a candidate key",
            "feedback": "This is incorrect. A candidate key must uniquely and minimally identify each record. Because bank accounts can be joint (shared by multiple people) and a student can have multiple accounts (or possibly none), BankAccount_Num does not reliably uniquely identify a single student."
          },
          {
            "id": 1,
            "text": "Registration_Num  can be a primary key",
            "feedback": "This is correct. Registration_Num is given as a unique registration number for each registered student, so it can serve as a primary key by uniquely identifying each row."
          },
          {
            "id": 2,
            "text": "UID  is a candidate key if all students are from the same country",
            "feedback": "This is correct under the stated condition. UID is unique at the national level, so if all students come from the same country, UID will uniquely identify each student and thus can be a candidate key."
          },
          {
            "id": 3,
            "text": "If  S  is a super key such that  S ∩ UID  is NULL then  S ∪ UID  is also a superkey",
            "feedback": "This is correct. A superkey is any set of attributes that uniquely identifies tuples; any superset of a superkey still uniquely identifies tuples, so S ∪ UID remains a superkey even if S and UID are disjoint."
          }
        ]
      },
      "answer": {
        "correctOption": 0,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Answer:  BankAccount_Num is not a candidate key. Reason BankAccount_Num fails: A candidate key must uniquely and minimally identify each record. Because accounts can be joint (shared by multiple students) and a student can have multiple accounts (or possibly no account), BankAccount_Num does not reliably provide uniqueness. Why Registration_Num works: It is specified as unique for each registered student, so it can serve as a primary key. Why UID can be a candidate key (given the condition): UID is unique at the national level, so if all students are from the same country, UID will uniquely identify each student. Why adding UID to a superkey preserves the property: A superkey already uniquely identifies tuples; any superset of a superkey (such as adding UID) still uniquely identifies tuples, so the result is also a superkey.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3833,
      "type": "MCQ",
      "difficulty": "BEGINNER",
      "topology": {
        "subjectId": "68da217e31f60703d61408e4",
        "topicId": "68da23455e8ee4416b4d422b",
        "subtopicId": "68da353c5e8ee4416b7156c4"
      },
      "content": {
        "questionText": "Consider the different activities related to email. m1: Send an email from mail client to mail server m2: Download an email from mailbox server to a mail client m3: Checking email in a web browser Which is the application level protocol used in each activity?",
        "options": [
          {
            "id": 0,
            "text": "m1:  HTTP     m2: SMTP     m3: POP",
            "feedback": "Incorrect. Sending an email from a mail client to a mail server uses SMTP (Simple Mail Transfer Protocol), not HTTP. SMTP is the protocol for submitting outgoing mail. Downloading mail from the mailbox server to a client is done with POP or IMAP, so labeling that as SMTP is also wrong. Checking mail in a web browser uses HTTP (or HTTPS), not POP in this context."
          },
          {
            "id": 1,
            "text": "m1:  SMTP     m2: FTP m3: HTTP",
            "feedback": "Partly correct. Sending mail from a client to a mail server uses SMTP — that mapping is correct. Checking mail in a web browser uses HTTP — that mapping is correct. However, downloading mail from a mailbox server to a client is not done with FTP; it is done with POP or IMAP. FTP is not used for standard email retrieval."
          },
          {
            "id": 2,
            "text": "m1:  SMTP     m2: POP m3: HTTP",
            "feedback": "Correct. Sending email from a mail client to a mail server uses SMTP. Downloading email from a mailbox server to a mail client commonly uses POP (Post Office Protocol); an alternative is IMAP if the client keeps mail synchronized on the server. Checking email in a web browser uses HTTP/HTTPS for the webmail interface."
          },
          {
            "id": 3,
            "text": "m1:  POP     m2: SMTP m3: IMAP",
            "feedback": "Incorrect. POP is not used to send mail from a client to a mail server — SMTP is used for sending. SMTP is not used to download mail from the mailbox to a client — POP or IMAP are used for retrieval. IMAP is used for synchronizing mail between client and server, but checking mail in a web browser typically uses HTTP/HTTPS (the web interface)."
          }
        ]
      },
      "answer": {
        "correctOption": 2,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Answer:  m1 uses SMTP; m2 uses POP (or IMAP); m3 uses HTTP/HTTPS. m1 (Send an email from mail client to mail server): SMTP is used to submit outgoing mail from a client to the mail server. m2 (Download an email from mailbox server to a mail client): POP (Post Office Protocol) is commonly used to download messages to a client. IMAP is an alternative that keeps messages synchronized on the server. m3 (Checking email in a web browser): Webmail uses HTTP or HTTPS to present and interact with mail through a browser.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3831,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subjectId": "68da217e31f60703d61408e4",
        "topicId": "68da23455e8ee4416b4d422b",
        "subtopicId": "68ee57959a9856840898aa0f"
      },
      "content": {
        "questionText": "A layer-4 firewall (a device that can look at all protocol headers up to the transport layer)  CANNOT",
        "options": [
          {
            "id": 0,
            "text": "block entire HTTP traffic during 9:00PM and 5:00AM",
            "feedback": "This is something a layer-4 firewall can do. It can block traffic based on transport-layer info (for example, TCP port 80 for HTTP) and can apply time-based rules. What it cannot do is inspect HTTP application payloads (for example, block specific URLs or form fields)."
          },
          {
            "id": 1,
            "text": "block all ICMP traffic",
            "feedback": "A layer-4 firewall can block protocols by type, so blocking all ICMP traffic is feasible. Note that ICMP is used for diagnostics (like ping), so blocking it may affect network troubleshooting, but it is within the capabilities of a transport/network-aware firewall."
          },
          {
            "id": 2,
            "text": "stop incoming traffic from specific IP address but allow outgoing traffic to the same IP address",
            "feedback": "This is possible. A layer-4 firewall can have directional rules that deny incoming packets from a specific IP while allowing outbound connections to that IP. In stateful mode it will also allow return traffic for legitimate outgoing connections, so the policy must be written with awareness of connection state."
          },
          {
            "id": 3,
            "text": "block TCP traffic from a specific user on a multi-user system during 9:00PM to 5:00AM",
            "feedback": "A layer-4 firewall cannot identify or enforce rules based on an OS user account on a multi-user host. It only sees transport-layer headers (IP addresses, ports, protocol) and timing. To block traffic from a specific user on a shared host you need application-layer controls, a host-based firewall, or a proxy/agent that associates network flows with user identities."
          }
        ]
      },
      "answer": {
        "correctOption": 3,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key insight:  a layer-4 firewall can inspect up to transport-layer headers (IP addresses, ports, TCP/UDP, protocol) but cannot see application payloads or map packets to OS-level user accounts. Can do: block traffic by protocol/port (for example, block HTTP by blocking TCP port 80) and apply time-based rules. Can do: block specific protocol types such as ICMP. Can do: create direction-based rules (for example, deny new incoming connections from an IP while allowing outgoing connections to that same IP); stateful behavior must be considered for return traffic. Cannot do: enforce policies tied to a specific OS user on a multi-user host, because user identity is not visible in transport-layer headers. Therefore the statement that a layer-4 firewall cannot block TCP traffic from a specific user on a multi-user system during 9:00PM to 5:00AM is correct. Per-user enforcement requires application-layer inspection, an authenticated proxy, or host-based controls.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3815,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subjectId": "68d38ec66dbf3983bc810cd9",
        "topicId": "68d38f386dbf3983bc828e43",
        "subtopicId": "68d39684d857e762193d2792"
      },
      "content": {
        "questionText": "Consider the following relations A, B and C:  How many tuples does the result of the following SQL query contain? \n\nSELECT A.Id \n\nFROM A \n\nWHERE A.Age > ALL (SELECT B.Age \n\n                    FROM B \n\n                    WHERE B.Name = ‘Arun’)",
        "options": [
          {
            "id": 0,
            "text": "4",
            "feedback": "Incorrect. There are only three rows in relation A, so the result cannot be 4. The correct reasoning is to first evaluate the subquery; because B has no row with Name = 'Arun', the subquery returns an empty set, and A.Age > ALL (empty set) is true for every row in A."
          },
          {
            "id": 1,
            "text": "3",
            "feedback": "Correct. The subquery SELECT B.Age FROM B WHERE B.Name = 'Arun' returns no rows because B has no tuple with Name = 'Arun'. A.Age > ALL (empty set) is vacuously true, so every row of A satisfies the WHERE clause. All three A.Id values (12, 15, 99) are returned, so the result contains 3 tuples."
          },
          {
            "id": 2,
            "text": "0",
            "feedback": "Incorrect. This would be the case only if no rows satisfied the WHERE clause. But when the subquery yields an empty set, the condition A.Age > ALL (empty set) is true for every A.Age (vacuously true), so all three rows are returned, not zero."
          },
          {
            "id": 3,
            "text": "1",
            "feedback": "Incorrect. One might think only a single A row is greater than some value, but because the subquery returns no ages (B has no 'Arun'), the ALL condition is satisfied by every row in A. Thus the query returns three tuples, not one."
          }
        ]
      },
      "answer": {
        "correctOption": 1,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key idea:  evaluate the subquery and apply the ALL semantics. Evaluate the subquery: SELECT B.Age FROM B WHERE B.Name = 'Arun' → no rows (B contains no tuple with Name = 'Arun'). Apply the condition A.Age > ALL (empty set). A universal comparison over an empty set is vacuously true, so every A.Age satisfies the condition. Therefore every tuple in A qualifies. The query returns A.Id for all three rows (12, 15, 99), so the result contains 3 tuples.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3814,
      "type": "MCQ",
      "difficulty": "ADVANCED",
      "topology": {
        "subjectId": "68d38ec66dbf3983bc810cd9",
        "topicId": "68d38f2f6dbf3983bc828bf0",
        "subtopicId": "68d39572d857e762193a9a67"
      },
      "content": {
        "questionText": "Consider the following relations A, B and C:  How many tuples does the result of the following relational algebra expression contain? Assume that the schema of  \\(A \\cup B\\)  is the same as that of  \\(A\\) . \\((A\\cup B)\\bowtie _{A.Id > 40 \\vee C.Id < 15} C\\)",
        "options": [
          {
            "id": 0,
            "text": "7",
            "feedback": "Correct. A ∪ B has 5 distinct tuples with Ids 12, 15, 99, 25, and 98. C has Ids 10 and 99. The join condition (left.Id > 40 OR C.Id < 15) is true for every left tuple when C.Id = 10 (since 10 < 15) — giving 5 pairs — and for left.Id > 40 when C.Id = 99 (left Ids 98 and 99) — giving 2 pairs. Total = 5 + 2 = 7."
          },
          {
            "id": 1,
            "text": "4",
            "feedback": "Incorrect. The count 4 would arise if you only applied left.Id > 40 to both C rows (left Ids 98 and 99 × 2 C rows = 4). That ignores the fact that C.Id = 10 satisfies C.Id < 15, which makes all five left tuples match that C row, so you must include those 5 pairs as well."
          },
          {
            "id": 2,
            "text": "5",
            "feedback": "Incorrect. The value 5 equals the number of distinct tuples in A ∪ B, but it assumes only one C row contributes or that the other C row matches none. In reality C.Id = 10 matches all 5 left tuples and C.Id = 99 additionally matches left tuples with Id > 40 (98 and 99), adding 2 more pairs, for a total of 7."
          },
          {
            "id": 3,
            "text": "9",
            "feedback": "Incorrect. The correct counting is 5 matches with C.Id = 10 plus 2 matches with C.Id = 99, totaling 7. The value 9 does not follow from the condition and likely comes from an incorrect union or double-counting; it is not consistent with the predicate evaluation shown in the solution."
          }
        ]
      },
      "answer": {
        "correctOption": 0,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key idea:  evaluate A ∪ B, list the Ids, and apply the join condition for each C row. Compute A ∪ B: distinct tuples have Ids 12, 15, 99, 25, 98 (5 tuples). C has Ids 10 and 99 (2 tuples). For C.Id = 10: C.Id < 15 is true, so every left tuple matches → 5 pairs. For C.Id = 99: C.Id < 15 is false, so we need left.Id > 40. Left Ids > 40 are 98 and 99 → 2 pairs. Total pairs = 5 + 2 = 7. Answer: 7 tuples.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3808,
      "type": "MCQ",
      "difficulty": "EXPERT",
      "topology": {
        "subjectId": "68da217e31f60703d61408e4",
        "topicId": "68da22625e8ee4416b4ba935",
        "subtopicId": "68da2c4f5e8ee4416b60e958"
      },
      "content": {
        "questionText": "Consider a source computer (S) transmitting a file of size 10 6  bits to a destination computer (D) over a network of two routers (R 1  and R 2 ) and three links (L 1 , L 2 , and L 3 ). L 1  connects S to R 1 ; L 2  connects R 1  to R 2 ; and L 3  connects R 2  to D. Let each link be of length 100 km. Assume signals travel over each link at a speed of 10 8  meters per second. Assume that the link bandwidth on each link is 1Mbps. Let the file be broken down into 1000 packets each of size 1000 bits. Find the total sum of transmission and propagation delays in transmitting the file from S to D?",
        "options": [
          {
            "id": 0,
            "text": "1005 ms",
            "feedback": "Correct. Treat the file as 1000 packets and use packet-level store-and-forward pipelining. Packet transmission time t_tx = 1000 bits / 1,000,000 bps = 1 ms. Propagation per link t_prop = 100 km / (10^8 m/s) = 1 ms. For 3 links and 1000 packets the end-to-end time is (N + L - 1)·t_tx + L·t_prop = (1000 + 3 - 1)·1 ms + 3·1 ms = 1005 ms."
          },
          {
            "id": 1,
            "text": "1010 ms",
            "feedback": "Incorrect. 1010 ms is 5 ms larger than the correct value. A likely mistake is overcounting propagation or adding extra transmission delays. Use t_tx = 1 ms and t_prop = 1 ms and the pipelined formula (N + L - 1)·t_tx + L·t_prop to get 1005 ms."
          },
          {
            "id": 2,
            "text": "3000 ms",
            "feedback": "Incorrect. 3000 ms equals 1000 packets × 3 links × 1 ms per packet, which ignores propagation delays and also ignores packet-level pipelining (it treats every transmission as strictly sequential across links). Because routers forward packets in a pipelined way, transmissions overlap and the total is smaller (1005 ms)."
          },
          {
            "id": 3,
            "text": "3003 ms",
            "feedback": "Incorrect. 3003 ms corresponds to treating the entire file as one large block and doing store-and-forward of the whole file at each router: 3·(file transmission 1000 ms) + 3·(1 ms propagation) = 3003 ms. Because the file is split into packets and routers forward packets as they arrive, pipelining reduces the total to 1005 ms."
          }
        ]
      },
      "answer": {
        "correctOption": 0,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key idea:  packets are sent in 1000 pieces and routers forward packets as they arrive, so transmissions are pipelined. Packet transmission time t_tx = 1000 bits / 1,000,000 bps = 0.001 s = 1 ms. Propagation per link t_prop = 100 km = 100,000 m; speed = 10^8 m/s ⇒ t_prop = 100,000 / 10^8 s = 0.001 s = 1 ms. For N = 1000 packets and L = 3 links, the end-to-end time with packet-level store-and-forward pipelining is (N + L - 1)·t_tx + L·t_prop. Compute: (1000 + 3 - 1)·1 ms + 3·1 ms = 1002 ms + 3 ms = 1005 ms. Therefore the total sum of transmission and propagation delays to deliver the file from S to D is 1005 ms.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3807,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subjectId": "68d38ec66dbf3983bc810cd9",
        "topicId": "68d38f2f6dbf3983bc828bf0",
        "subtopicId": "68d394ed6dbf3983bc8bb92b"
      },
      "content": {
        "questionText": "Suppose R 1 ( A , B) and R 2 ( C , D) are two relation schemas. Let r 1  and r 2  be the corresponding relation instances. B is a foreign key that refers to C in R 2 . If data in r 1  and r 2  satisfy referential integrity constraints, which of the following is ALWAYS TRUE?",
        "options": [
          {
            "id": 0,
            "text": "\\(\\prod_{B}(r_{1})- \\prod _{C}(r_{2})= \\varnothing\\)",
            "feedback": "Correct. Referential integrity for a foreign key from B in r1 to C in r2 requires that every (non-NULL) value of B that appears in r1 also appears as a value of C in r2. That means the set of B values not present in C is empty, so ∏_B(r1) - ∏_C(r2) = ∅."
          },
          {
            "id": 1,
            "text": "\\(\\prod_{C}(r_{2})- \\prod _{B}(r_{1})= \\varnothing\\)",
            "feedback": "Incorrect. This statement says every value of C must appear in B, but referential integrity only requires that every B value appears in C. There can be values in C that are not referenced by any tuple in r1, so ∏_C(r2) - ∏_B(r1) can be non-empty."
          },
          {
            "id": 2,
            "text": "\\(\\prod_{B}(r_{1}) = \\prod _{C}(r_{2})\\)",
            "feedback": "Incorrect. Equality would require both that every B value appears in C and that every C value appears in B. Referential integrity guarantees only the first direction (B ⊆ C), not that C ⊆ B, so the two projections need not be equal."
          },
          {
            "id": 3,
            "text": "\\(\\prod_{B}(r_{1}) - \\prod _{C}(r_{2}) \\neq \\varnothing\\)",
            "feedback": "Incorrect. This asserts that there exists some B value not present in C, which directly contradicts the referential integrity requirement that B values must be found in C. So this cannot be always true."
          }
        ]
      },
      "answer": {
        "correctOption": 0,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key idea:  A foreign key from attribute B in r1 to attribute C in r2 means every (non-NULL) value appearing in B of r1 must also appear among the values of C in r2. Therefore, the projection of B over r1 is a subset of the projection of C over r2: ∏_B(r1) ⊆ ∏_C(r2). From this subset relationship it follows that the difference ∏_B(r1) - ∏_C(r2) must be the empty set. Note: If NULL values are permitted for the foreign key B, the referential constraint applies to non-NULL B values; the statement above is understood in that standard sense.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3802,
      "type": "MCQ",
      "difficulty": "ADVANCED",
      "topology": {
        "subjectId": "68d24e621c69bbb6f527dabb",
        "topicId": "68d24e8eb905a26b8ed9c0f3",
        "subtopicId": "68d2500d1c69bbb6f52cff49"
      },
      "content": {
        "questionText": "Let G be a complete undirected graph on 6 vertices. If vertices of G are labeled, then the number of distinct cycles of length 4 in G is equal to",
        "options": [
          {
            "id": 0,
            "text": "15",
            "feedback": "Incorrect. 15 is the number of ways to choose 4 vertices from 6 (C(6,4) = 15). Each chosen set of 4 labeled vertices yields 3 distinct undirected 4-cycles because the number of cyclic orderings on 4 labeled vertices up to rotation and reversal is (4−1)!/2 = 3. Hence the total number of distinct 4-cycles is 15 × 3 = 45."
          },
          {
            "id": 1,
            "text": "30",
            "feedback": "Incorrect. 30 would come from assuming each 4-vertex subset gives exactly 2 distinct cycles. On 4 labeled vertices there are actually 3 distinct undirected 4-cycles since (4−1)!/2 = 3. So the correct total is C(6,4) × 3 = 15 × 3 = 45."
          },
          {
            "id": 2,
            "text": "45",
            "feedback": "Correct. One clear way: choose 4 vertices from 6 gives C(6,4) = 15. For 4 labeled vertices the number of distinct undirected 4-cycles (identifying rotations and reversal) is (4−1)!/2 = 3, so 15 × 3 = 45. Equivalently, count ordered 4-tuples P(6,4) = 360 and divide by 4 rotations × 2 directions = 8, giving 360/8 = 45."
          },
          {
            "id": 3,
            "text": "360",
            "feedback": "Incorrect. 360 counts ordered sequences of 4 distinct vertices (P(6,4) = 360). Each undirected 4-cycle corresponds to 4 starting points and 2 traversal directions, i.e. 8 ordered sequences, so divide 360 by 8 to get 45 distinct undirected 4-cycles."
          }
        ]
      },
      "answer": {
        "correctOption": 2,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Final answer: 45 Method 1 (choose vertices then count cycles): Choose 4 vertices from 6: C(6,4) = 15. On those 4 labeled vertices the number of distinct undirected 4-cycles (counting cyclic rotations and reversal as the same) is (4−1)!/2 = 3. Multiply: 15 × 3 = 45 distinct 4-cycles. Method 2 (permutations then divide symmetries): Count ordered 4-tuples P(6,4) = 360. Each undirected 4-cycle corresponds to 4 rotations × 2 directions = 8 ordered tuples, so 360/8 = 45. Note: The answer 15 only counts the 4-vertex subsets, not the distinct cyclic orderings on each subset; the correct count of distinct 4-cycles is 45.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3801,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subjectId": "68d24e621c69bbb6f527dabb",
        "topicId": "68d24e84b905a26b8ed9c07b",
        "subtopicId": "68d24f9cb905a26b8edb8bed"
      },
      "content": {
        "questionText": "How many onto (or surjective) functions are there from an  \\(n\\) -element  \\((n \\geq 2)\\)  set to a 2-element set?",
        "options": [
          {
            "id": 0,
            "text": "\\(2^n\\)",
            "feedback": "2^n counts all functions from an n-element domain to a 2-element codomain (each domain element has 2 choices). However, two of these functions are not surjective: the constant function sending every element to the first target and the constant function sending every element to the second target. Removing those two gives the number of onto functions 2^n - 2. For example, when n=2 there are 2^2 - 2 = 2 onto functions."
          },
          {
            "id": 1,
            "text": "\\(2^n - 1\\)",
            "feedback": "2^n - 1 subtracts only one function, but there are two constant functions (one mapping every element to the first target and one mapping every element to the second) that are not onto. Therefore you must subtract 2, not 1, and the correct count is 2^n - 2. For example, when n=2 there are 2^2 - 2 = 2 onto functions."
          },
          {
            "id": 2,
            "text": "\\(2^n - 2\\)",
            "feedback": "Correct. There are 2^n total functions from an n-element set to a 2-element set, and the only non-surjective functions are the two constant maps, so the number of onto functions is 2^n - 2. Example: for n=3, 2^3 - 2 = 6."
          },
          {
            "id": 3,
            "text": "\\(2(2^n - 2)\\)",
            "feedback": "2(2^n - 2) multiplies the correct count by 2 and therefore overcounts. For example, when n=2 this formula gives 4 but the correct number of onto functions is 2. The extra factor 2 is not needed because subtracting the two constant functions already accounts for both targets."
          }
        ]
      },
      "answer": {
        "correctOption": 2,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Answer:  2^n - 2 Explanation: Total functions: Each of the n elements in the domain can be sent to either of the two targets, so there are 2^n total functions. Non-surjective functions: The only functions that are not onto are the two constant maps (one sending every element to the first target, the other sending every element to the second target). Therefore onto functions = total functions − non-surjective functions = 2^n − 2. Example: For n = 3 there are 2^3 − 2 = 6 onto functions; for n = 2 there are 2^2 − 2 = 2 onto functions.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3798,
      "type": "MCQ",
      "difficulty": "EXPERT",
      "topology": {
        "subjectId": "68da217e31f60703d61408e4",
        "topicId": "68da229431f60703d6167703",
        "subtopicId": "68da33575e8ee4416b6f5b3e"
      },
      "content": {
        "questionText": "An Internet Service Provider (ISP) has the following chunk of CIDR-based IP addresses available with it: 245.248.128.0/20. The ISP wants to give half of this chunk of addresses to Organization A, and a quarter to Organization B, while retaining the remaining with itself. Which of the following is a valid allocation of addresses to A and B?",
        "options": [
          {
            "id": 0,
            "text": "245.248.136.0/21 and 245.248.128.0/22",
            "feedback": "Correct. A /20 contains 2^(32-20)=4096 addresses. Half of that is a /21 (2048 addresses) and a quarter is a /22 (1024 addresses). 245.248.136.0/21 is one half of the /20 (covers 245.248.136.0–245.248.143.255) and 245.248.128.0/22 is a valid quarter inside the other half (covers 245.248.128.0–245.248.131.255). They do not overlap and both lie inside 245.248.128.0/20, leaving the remaining 245.248.132.0/22 for the ISP."
          },
          {
            "id": 1,
            "text": "245.248.128.0/21 and 245.248.128.0/22",
            "feedback": "Incorrect. Both entries start at 245.248.128.0. The /21 (245.248.128.0/21) already covers 245.248.128.0–245.248.135.255, so 245.248.128.0/22 would be a subset that overlaps the /21 and cannot be assigned separately."
          },
          {
            "id": 2,
            "text": "245.248.132.0/22 and 245.248.132.0/21",
            "feedback": "Incorrect. A /21 must start on an /21 boundary (multiples of 8 in the third octet, e.g., 128 or 136). 245.248.132.0/21 is not aligned to a valid /21 network boundary, and the two listed ranges would overlap, so this allocation is invalid."
          },
          {
            "id": 3,
            "text": "245.248.136.0/24 and 245.248.132.0/21",
            "feedback": "Incorrect. 245.248.136.0/24 is only 256 addresses, not half of the /20 (half requires a /21). Also 245.248.132.0/21 is not aligned on a /21 boundary (132 is not a multiple of 8 in the third octet), so that /21 is invalid. Therefore this allocation is not valid."
          }
        ]
      },
      "answer": {
        "correctOption": 0,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key insight:  split the /20 into subnets by size. A /20 has 4096 addresses; half is a /21 (2048 addresses) and a quarter is a /22 (1024 addresses). Step 1: Identify /21 boundaries inside 245.248.128.0/20. The two /21s are 245.248.128.0/21 (covers 245.248.128.0–245.248.135.255) and 245.248.136.0/21 (covers 245.248.136.0–245.248.143.255). Step 2: Subdivide one /21 into /22s if needed. 245.248.128.0/21 contains two /22s: 245.248.128.0/22 (245.248.128.0–245.248.131.255) and 245.248.132.0/22 (245.248.132.0–245.248.135.255). Step 3: Allocate accordingly. Give 245.248.136.0/21 (a half) to Organization A and 245.248.128.0/22 (a quarter) to Organization B. The remaining block 245.248.132.0/22 stays with the ISP. Therefore the valid allocation is 245.248.136.0/21 and 245.248.128.0/22 because they are correctly sized, aligned, non-overlapping, and lie within 245.248.128.0/20.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3794,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subjectId": "68cbde4f61903cd7d6ed67c5",
        "topicId": "68cbe51b61903cd7d6104237",
        "subtopicId": "68cbe6cb61903cd7d6156d81"
      },
      "content": {
        "questionText": "What is the minimal form of the Karnaugh map shown below? Assume that X denotes a don’t care term.",
        "options": [
          {
            "id": 0,
            "text": "\\(\\bar{b} \\bar{d}\\)",
            "feedback": "~b~d is a valid implicant that groups the four cells with b=0 and d=0 (m0, m2, m8 and the don't-care m10). However it does not cover the 1 at a=1, b=0, c=0, d=1 (m9), so this term alone is incomplete — an additional term is required to cover that 1."
          },
          {
            "id": 1,
            "text": "\\(\\bar { b } \\bar { d } + \\bar{b} \\bar{c}\\)",
            "feedback": "Correct. Using don't-cares you can form two 4-cell groups: one covering b=0 and d=0 → ~b~d (m0, m2, m8, m10), and one covering b=0 and c=0 → ~b~c (m0, m1, m8, m9). Together they cover every 1, giving the minimal expression ~b~d + ~b~c (which factors to ~b(~c + ~d))."
          },
          {
            "id": 2,
            "text": "\\(\\bar{b} \\bar{d} + {a} \\bar{b} \\bar{c} {d}\\)",
            "feedback": "This expression covers all 1s but is not minimal. The second term a~b~c d is more specific than necessary: because there is a don't-care at a=0,b=0,c=0,d=1 (m1), you can combine m1 and m9 to get the more general term ~b~c. Replacing a~b~c d with ~b~c yields the minimal ~b~d + ~b~c."
          },
          {
            "id": 3,
            "text": "\\(\\bar{b} \\bar{d} + \\bar{b} \\bar{c} + \\bar{c} \\bar{d}\\)",
            "feedback": "This covers all 1s but is not minimal: the term ~c~d is redundant. All required 1s are already covered by ~b~d and ~b~c, so ~c~d can be removed to obtain the minimal expression ~b~d + ~b~c."
          }
        ]
      },
      "answer": {
        "correctOption": 1,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Correct. Using don't-cares you can form two 4-cell groups: one covering b=0 and d=0 → ~b~d (m0, m2, m8, m10), and one covering b=0 and c=0 → ~b~c (m0, m1, m8, m9). Together they cover every 1, giving the minimal expression ~b~d + ~b~c (which factors to ~b(~c + ~d)).",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3791,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subjectId": "68d38ec66dbf3983bc810cd9",
        "topicId": "68d38f496dbf3983bc82b251",
        "subtopicId": "68d3974e6dbf3983bc9153ec"
      },
      "content": {
        "questionText": "Consider the following transactions with data items P and Q initialized to zero: T 1  :read (P);  \n\n     read (Q);  \n\n     if P = 0 then Q := Q + 1 ;  \n\n     write (Q).  \n\nT 2  : read (Q);  \n\n     read (P);  \n\n     if Q = 0 then P := P + 1 ;  \n\n     write (P). Any non-serial interleaving of T 1  and T 2  for concurrent execution leads to",
        "options": [
          {
            "id": 0,
            "text": "a serializable schedule",
            "feedback": "Incorrect. Any non-serial interleaving produces a conflict cycle. T1's read of P (r1(P)) will occur before T2's write of P (w2(P)), and T2's read of Q (r2(Q)) will occur before T1's write of Q (w1(Q)). These two conflicts create edges T1 → T2 and T2 → T1 in the precedence graph, so the schedule is not conflict serializable (and therefore not equivalent to a serial schedule)."
          },
          {
            "id": 1,
            "text": "a schedule that is not conflict serializable",
            "feedback": "Correct. Every non-serial interleaving yields r1(P) < w2(P) and r2(Q) < w1(Q), so the precedence graph has edges in both directions and therefore a cycle. A cycle means the schedule is not conflict serializable."
          },
          {
            "id": 2,
            "text": "a conflict serializable schedule",
            "feedback": "Incorrect. The interleaving is not conflict serializable: it creates a cycle in the precedence graph (see r1(P) vs w2(P) and r2(Q) vs w1(Q)), so it cannot be transformed into a serial order by swapping non-conflicting operations."
          },
          {
            "id": 3,
            "text": "a schedule for which a precedence graph cannot be drawn",
            "feedback": "Incorrect. A precedence (conflict) graph can always be drawn for a finite schedule; here the graph is drawable and contains a cycle demonstrating the schedule is not conflict serializable."
          }
        ]
      },
      "answer": {
        "correctOption": 1,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Answer:  a schedule that is not conflict serializable Reasoning: Initial values: P = 0, Q = 0. Transaction T1 (in order): read P; read Q; if P = 0 then Q := Q + 1; write Q. Transaction T2 (in order): read Q; read P; if Q = 0 then P := P + 1; write P. In any non-serial interleaving where the transactions overlap, T1's read of P happens before T2's eventual write of P, producing a read–write conflict and an edge from the transaction that read P to the transaction that later writes P. Similarly, T2's read of Q happens before T1's eventual write of Q, producing a read–write conflict and an edge from the transaction that read Q to the transaction that later writes Q. Concretely, the precedence (conflict) graph has an edge from T1 to T2 and an edge from T2 to T1, forming a cycle. A cycle in the precedence graph means the schedule cannot be transformed into any serial schedule by swapping non-conflicting operations; therefore it is not conflict serializable. Conclusion: Any non-serial interleaving of the two transactions yields the read/write conflicts that produce a cycle in the precedence graph, so such a schedule is not conflict serializable.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3787,
      "type": "MCQ",
      "difficulty": "BEGINNER",
      "topology": {
        "subjectId": "68da217e31f60703d61408e4",
        "topicId": "68da229431f60703d6167703",
        "subtopicId": "68da331e5e8ee4416b6efbac"
      },
      "content": {
        "questionText": "In the IPv4 addressing format, the number of networks allowed under Class C addresses is",
        "options": [
          {
            "id": 0,
            "text": "2 14",
            "feedback": "Incorrect. 2^14 = 16,384 is the number of networks for Class B addresses (Class B has leading bits '10' leaving 14 network bits), not for Class C."
          },
          {
            "id": 1,
            "text": "2 7",
            "feedback": "Incorrect. 2^7 = 128 is the number of networks for Class A addresses (Class A has leading bit '0' leaving 7 network bits), so this does not apply to Class C."
          },
          {
            "id": 2,
            "text": "2 21",
            "feedback": "Correct. Class C addresses start with the bits 110, which fixes 3 bits and leaves 21 variable bits for the network ID. So the number of Class C networks = 2^21 = 2,097,152."
          },
          {
            "id": 3,
            "text": "2 24",
            "feedback": "Incorrect. 2^24 = 16,777,216 would imply 24 variable bits for the network, but Class C has only 21 variable network bits because the first three bits are fixed as 110. Therefore 2^24 is not the count of Class C networks."
          }
        ]
      },
      "answer": {
        "correctOption": 2,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key insight:  Class C addresses begin with the bit pattern 110, so three leading bits are fixed and the remaining bits determine distinct networks. Default Class C prefix is /24 (24 bits in the network portion), but the first 3 bits are fixed as 110. Variable network bits = 24 − 3 = 21. Number of Class C networks = 2^21 = 2,097,152.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3786,
      "type": "MCQ",
      "difficulty": "BEGINNER",
      "topology": {
        "subjectId": "68da217e31f60703d61408e4",
        "topicId": "68da23455e8ee4416b4d422b",
        "subtopicId": "68da353c5e8ee4416b7156c4"
      },
      "content": {
        "questionText": "Which of the following transport layer protocols is used to support electronic mail?",
        "options": [
          {
            "id": 0,
            "text": "SMTP",
            "feedback": "Incorrect. SMTP (Simple Mail Transfer Protocol) is an application-layer protocol used to send and route email; it runs on top of a transport protocol (typically TCP). SMTP itself is not a transport-layer protocol."
          },
          {
            "id": 1,
            "text": "IP",
            "feedback": "Incorrect. IP (Internet Protocol) is a network-layer protocol responsible for addressing and routing packets across networks. It is not a transport-layer protocol."
          },
          {
            "id": 2,
            "text": "TCP",
            "feedback": "Correct. TCP is a transport-layer protocol that provides a reliable, connection-oriented byte stream. Email application protocols such as SMTP, POP3 and IMAP run over TCP (for example, SMTP commonly uses TCP port 25), so TCP supports electronic mail delivery."
          },
          {
            "id": 3,
            "text": "UDP",
            "feedback": "Incorrect. UDP is a transport-layer protocol but it is connectionless and does not guarantee delivery or ordering. Email requires reliable delivery, so email protocols use TCP rather than UDP."
          }
        ]
      },
      "answer": {
        "correctOption": 2,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Answer: TCP.  Email protocols require reliable, ordered delivery, which TCP provides. Why TCP: It is connection-oriented and provides reliability (error detection, retransmission, and ordered delivery), features needed for transferring email data. How email uses it: Application-layer email protocols such as SMTP, POP3 and IMAP run over TCP (for example, SMTP commonly uses TCP port 25). Why other protocols are not correct: IP is a network-layer protocol (not transport-layer), SMTP is an application-layer protocol (not a transport protocol), and UDP is a transport protocol but is connectionless and unreliable, so it is unsuitable for standard email delivery.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3783,
      "type": "MCQ",
      "difficulty": "ADVANCED",
      "topology": {
        "subjectId": "68cbde4f61903cd7d6ed67c5",
        "topicId": "68cbe52d61903cd7d610466e",
        "subtopicId": "68ee1f421376e9452bcbcb80"
      },
      "content": {
        "questionText": "The amount of ROM needed to implement a 4 bit multiplier is",
        "options": [
          {
            "id": 0,
            "text": "64 bits",
            "feedback": "Incorrect. A 4-bit multiplier has two 4-bit inputs (16 × 16 = 256 input combinations) and produces an 8-bit product. The ROM must store 256 words × 8 bits = 2048 bits (2 Kbits). 64 bits is far too small — it would only store eight 8-bit words."
          },
          {
            "id": 1,
            "text": "128 bits",
            "feedback": "Incorrect. 128 bits would store only 16 words of 8 bits each, but the multiplier needs 256 distinct outputs (one for each pair of 4-bit inputs). The correct total is 256 × 8 = 2048 bits (2 Kbits)."
          },
          {
            "id": 2,
            "text": "1 Kbits",
            "feedback": "Incorrect. 1 Kbit (1024 bits) is half of the required storage. It would hold 128 words of 8 bits, but there are 256 input combinations, so you need 256 × 8 = 2048 bits (2 Kbits)."
          },
          {
            "id": 3,
            "text": "2 Kbits",
            "feedback": "Correct. A multiplier with two 4-bit inputs has 16 × 16 = 256 possible input pairs. Each product needs up to 8 bits (since 15 × 15 = 225 < 256). So the ROM must store 256 words of 8 bits: 256 × 8 = 2048 bits, which is 2 Kbits."
          }
        ]
      },
      "answer": {
        "correctOption": 3,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key idea:  compute how many input combinations there are and how many bits are needed for each product. There are two 4-bit inputs, so total input bits = 4 + 4 = 8. That gives 2^8 = 256 distinct input combinations (or think of a 16 × 16 table = 256 entries). Each product can be up to 8 bits (15 × 15 = 225, which fits in 8 bits). So each entry must store 8 bits. Total ROM required = 256 entries × 8 bits = 2048 bits = 2 Kbits. Therefore, the correct answer is 2 Kbits.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3781,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subjectId": "68d24e621c69bbb6f527dabb",
        "topicId": "68d24e8eb905a26b8ed9c0f3",
        "subtopicId": "68d25064b905a26b8edc5a38"
      },
      "content": {
        "questionText": "Let G be a simple undirected planar graph on 10 vertices with 15 edges. If G is a connected graph, then the number of  bounded  faces in any embedding of G on the plane is equal to",
        "options": [
          {
            "id": 0,
            "text": "3",
            "feedback": "Incorrect. For a connected planar graph use Euler's formula v - e + f = 2. Here v = 10 and e = 15, so total faces f = 2 - 10 + 15 = 7. The number of bounded faces is total faces minus the unbounded (outer) face, i.e. 7 - 1 = 6, not 3."
          },
          {
            "id": 1,
            "text": "4",
            "feedback": "Incorrect. Apply Euler's formula: v - e + f = 2. With v = 10 and e = 15 we get f = 7 total faces. Subtract the outer face to get bounded faces = 7 - 1 = 6, so 4 is not correct."
          },
          {
            "id": 2,
            "text": "5",
            "feedback": "Incorrect. Using Euler's formula for connected planar graphs gives total faces f = 2 - 10 + 15 = 7. The bounded faces equal f - 1 = 6, so 5 is too small."
          },
          {
            "id": 3,
            "text": "6",
            "feedback": "Correct. For a connected planar graph with 10 vertices and 15 edges, Euler's formula gives total faces f = 2 - v + e = 7. Removing the unbounded face leaves 7 - 1 = 6 bounded faces."
          }
        ]
      },
      "answer": {
        "correctOption": 3,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key idea:  use Euler's formula for connected planar graphs. Step 1: Apply Euler's formula v - e + f = 2. With v = 10 and e = 15 we get f = 2 - 10 + 15 = 7 total faces. Step 2: The number of bounded faces equals total faces minus the unbounded (outer) face: 7 - 1 = 6. Therefore the number of bounded faces in any planar embedding of the connected graph is 6.",
      "metadata": {
        "status": "PUBLISHED"
      }
    }
  ]
}