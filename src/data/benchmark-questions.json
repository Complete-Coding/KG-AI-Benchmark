{
  "generatedAt": "2025-10-24T12:47:42.353Z",
  "total": 50,
  "stats": {
    "countsByType": {
      "MSQ": 1,
      "MCQ": 49
    }
  },
  "questions": [
    {
      "questionId": 6090,
      "type": "MSQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subject": "Theory of Computation",
        "topic": "Regular Language",
        "subtopic": "Regular Language Identification"
      },
      "content": {
        "questionText": "Let Σ = {𝑎, 𝑏, 𝑐}. For 𝑥 ∈ Σ∗ , and 𝛼 ∈ Σ, let #𝛼(𝑥) denote the number of occurrences of 𝛼 in 𝑥. Which one or more of the following option(s) define(s) regular language(s)?",
        "options": [
          {
            "id": 0,
            "text": "{𝑎 𝑚 𝑏 𝑛  | 𝑚, 𝑛 ≥ 0}",
            "feedback": ""
          },
          {
            "id": 1,
            "text": "{𝑎, 𝑏} ∗  ∩ {𝑎 𝑚 𝑏 𝑛 𝑐 𝑚−𝑛  | 𝑚 ≥ 𝑛 ≥ 0}",
            "feedback": ""
          },
          {
            "id": 2,
            "text": "{𝑤 | 𝑤 ∈ {𝑎, 𝑏} ∗  , # 𝑎  (𝑤) ≡ 2 (mod 7), and # 𝑏  (𝑤) ≡ 3 (mod 9)}",
            "feedback": ""
          },
          {
            "id": 3,
            "text": "{𝑤 | 𝑤 ∈ {𝑎, 𝑏} ∗  , # 𝑎  (𝑤) ≡ 2 (mod 7), and # 𝑎  (𝑤) = # 𝑏 (𝑤)}",
            "feedback": ""
          }
        ]
      },
      "answer": {
        "correctOption": null,
        "correctOptions": [
          0,
          2
        ],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "",
      "metadata": {
        "status": "READY_FOR_SME"
      }
    },
    {
      "questionId": 6089,
      "type": "MCQ",
      "difficulty": "BEGINNER",
      "topology": {
        "subject": "Theory of Computation",
        "topic": "Context Free Grammar",
        "subtopic": "Basics"
      },
      "content": {
        "questionText": "S -> aSa | bSb | a | b The language generated by the above grammar over the alphabet {a, b} is the set of",
        "options": [
          {
            "id": 0,
            "text": "All palindromes",
            "feedback": ""
          },
          {
            "id": 1,
            "text": "All odd length palindromes.",
            "feedback": ""
          },
          {
            "id": 2,
            "text": "Strings that begin and end with the same symbol",
            "feedback": ""
          },
          {
            "id": 3,
            "text": "All even length palindromes",
            "feedback": ""
          }
        ]
      },
      "answer": {
        "correctOption": 1,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "",
      "metadata": {
        "status": "READY_FOR_SME"
      }
    },
    {
      "questionId": 6088,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subject": "Theory of Computation",
        "topic": "Context Free Grammar",
        "subtopic": null
      },
      "content": {
        "questionText": "Consider a CFG with the following productions.  S → AA | B  A → 0A | A0 | 1  B → 0B00 | 1 S is the start symbol, A and B are non-terminals and 0 and 1 are the terminals. The language generated by this grammar is",
        "options": [
          {
            "id": 0,
            "text": "{0 n  10 2n  | n ≥ 1}",
            "feedback": ""
          },
          {
            "id": 1,
            "text": "{0 i  10 j  10 k  | i, j, k ≥ 0} ∪ {0 n  10 2n  | n ≥ 0}",
            "feedback": ""
          },
          {
            "id": 2,
            "text": "{0 i  10 j  | i, j ≥ 0} ∪ {0 n  10 2n  | n ≥ 0}",
            "feedback": ""
          },
          {
            "id": 3,
            "text": "The set of all strings over {0, 1} containing at least two 0’s",
            "feedback": ""
          }
        ]
      },
      "answer": {
        "correctOption": 1,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "",
      "metadata": {
        "status": "READY_FOR_SME"
      }
    },
    {
      "questionId": 3949,
      "type": "MCQ",
      "difficulty": "ADVANCED",
      "topology": {
        "subject": "Computer Networks",
        "topic": "Network Layer - Routing Protocols",
        "subtopic": "Distance Vector Routing"
      },
      "content": {
        "questionText": "Consider a network with 6 routers R1 to R6 connected with links having weights as shown in the following diagram  Suppose the weights of all unused links in the previous question are changed to 2 and the distance vector algorithm is used again until all routing tables stabilize. How many links will now remain unused?",
        "options": [
          {
            "id": 0,
            "text": "0",
            "feedback": "Correct — after reducing the weights of the previously unused links to 2, recomputing shortest paths shows that every link becomes part of at least one shortest-path route. Therefore no link remains unused."
          },
          {
            "id": 1,
            "text": "1",
            "feedback": "Incorrect — lowering the unused-link weights to 2 makes those links attractive enough to be chosen on shortest paths, so you should not expect one link to remain unused in the recomputed routing."
          },
          {
            "id": 2,
            "text": "2",
            "feedback": "Incorrect — with the decreased weights the alternative (previously unused) links become part of shortest paths, so two links remaining unused does not match the recomputed routing."
          },
          {
            "id": 3,
            "text": "3",
            "feedback": "Incorrect — three unused links would imply multiple heavy links remain strictly worse than alternative routes even after their weights are lowered to 2; recomputing the distance vectors shows that is not true."
          }
        ]
      },
      "answer": {
        "correctOption": 1,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key insight:  when you reduce the weights of links that were previously unused to 2, those links typically become part of cheaper routes. Recompute shortest (distance-vector) routes from each router and check whether any link is never used as a next hop to any destination. Steps (brief): 1) Identify the links that were unused in the previous configuration and set their weights to 2. 2) Run the distance-vector updates (or compute shortest-path distances) from each router to all destinations, using the new weights. 3) For each link, check whether it is used as a next hop by at least one router on the shortest route to some destination. Conclusion: After lowering the previously-unused links to weight 2 and recomputing routing, every link becomes part of some shortest-path route. So 0 links remain unused.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3948,
      "type": "MCQ",
      "difficulty": "ADVANCED",
      "topology": {
        "subject": "Computer Networks",
        "topic": "Network Layer - Routing Protocols",
        "subtopic": "Distance Vector Routing"
      },
      "content": {
        "questionText": "Consider a network with 6 routers R1 to R6 connected with links having weights as shown in the following diagram  All the routers use the distance vector based routing algorithm to update their routing tables. Each router starts with its routing table initialized to contain an entry for each neighbour with the weight of the respective connecting link. After all the routing tables stabilize, how many links in the network will never be used for carrying any data?",
        "options": [
          {
            "id": 0,
            "text": "4",
            "feedback": "Incorrect. After distance-vector routing stabilizes, two links will never be used. Explain why this option is wrong by showing which links are unused and why."
          },
          {
            "id": 1,
            "text": "3",
            "feedback": "Incorrect. Only two links remain unused, not three. Show reasoning identifying the unused links (the highest-cost links in redundant rings) and why routes prefer cheaper alternatives."
          },
          {
            "id": 2,
            "text": "2",
            "feedback": "Correct. Two links will never be used for carrying any data. Provide concise explanation identifying which links are unused and why distance-vector routing chooses other paths based on path costs."
          },
          {
            "id": 3,
            "text": "1",
            "feedback": "Incorrect. Only two links remain unused, not one. Provide reasoning pointing out which specific links are never chosen due to higher cumulative path costs compared to alternatives."
          }
        ]
      },
      "answer": {
        "correctOption": 2,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Correct. Two links will never be used for carrying any data. Provide concise explanation identifying which links are unused and why distance-vector routing chooses other paths based on path costs.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3947,
      "type": "MCQ",
      "difficulty": "EXPERT",
      "topology": {
        "subject": "Data Structure",
        "topic": "Hashing",
        "subtopic": "Linear Probing"
      },
      "content": {
        "questionText": "A hash table of length 10 uses open addressing with hash function h(k)=k mod 10, and linear probing. After inserting 6 values into an empty hash table, the table is as shown below \\(\\begin{array}{|l|l|}\\hline \\text{0}  &  \\text{} \\\\ \\hline \\text{1} & \\text{} \\\\\\hline  \\text{2} & \\text{42} \\\\ \\hline  \\text{3} & \\text{23} \\\\\\hline   \\text{4} & \\text{34} \\\\\\hline   \\text{5} & \\text{52} \\\\\\hline   \\text{6} & \\text{46} \\\\\\hline   \\text{7} & \\text{33} \\\\\\hline   \\text{8} & \\text{} \\\\\\hline   \\text{9} & \\text{} \\\\\\hline   \\end{array}\\) How many different insertion sequences of the key values using the same hash function and linear probing will result in the hash table shown above?",
        "options": [
          {
            "id": 0,
            "text": "10",
            "feedback": "10 is incorrect. The partial-order constraints from linear probing allow many more insertion orders than 10. A careful count shows 30 valid orderings (see solution)."
          },
          {
            "id": 1,
            "text": "20",
            "feedback": "20 is incorrect. While 20 is closer, it still undercounts the valid insertion sequences. The correct count is 30, obtained by counting permutations that satisfy the derived precedence constraints."
          },
          {
            "id": 2,
            "text": "30",
            "feedback": "30 is correct. There are 30 insertion sequences that produce the given table; see the solution for a concise derivation using dependency constraints and a small combinatorial count."
          },
          {
            "id": 3,
            "text": "40",
            "feedback": "40 is incorrect. This overcounts the possibilities. The constraints coming from keys' home slots reduce the number of valid permutations to 30, not 40."
          }
        ]
      },
      "answer": {
        "correctOption": 2,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key idea:  use the fact that a key that ends at position p with home h must be inserted after all keys occupying slots h..p-1. Identify keys and homes: 42→2, 23→3, 34→4, 52→2, 46→6, 33→3. From their final positions, 52 ends at slot 5 but has home 2, so the keys at slots 2, 3, 4 (42, 23, 34) must have been inserted before 52. 33 ends at slot 7 but has home 3, so the keys at slots 3, 4, 5, 6 (23, 34, 52, 46) must have been inserted before 33. Thus 33 must come after all the other five keys, so 33 is fixed as the last insertion. Among the remaining five (42, 23, 34, 52, 46), only 52 must come after 42, 23, 34; 46 has no constraints. So we need permutations of these five where 52 is after 42, 23, 34. Count them: there are 5! = 120 permutations of the five items, and in exactly one quarter of those permutations 52 is after the three specific items (42, 23, 34). So the count is 120/4 = 30. Answer: 30",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3945,
      "type": "MCQ",
      "difficulty": "EXPERT",
      "topology": {
        "subject": "Algorithm",
        "topic": "Single Source Shortest Path",
        "subtopic": "Multiple Topics"
      },
      "content": {
        "questionText": "Consider a complete undirected graph with vertex set {0, 1, 2, 3, 4}. Entry Wij in the matrix W below is the weight of the edge {i, j}. W =  \\(\\begin{pmatrix} 0 & 1 & 8 & 1 & 4 \\\\ 1 & 0 & 12 & 4 & 9 \\\\ 8 & 12 & 0 & 7 & 3 \\\\ 1 & 4 & 7 & 0 & 2 \\\\ 4 & 9 & 3 & 2 & 0 \\end{pmatrix}\\) What is the minimum possible weight of a path P from vertex 1 to vertex 2 in this graph such that P contains at most 3 edges?",
        "options": [
          {
            "id": 0,
            "text": "7",
            "feedback": "Incorrect. The weight 7 would come from the path 1->0->3->4->2 with weights 1+1+2+3 = 7, but that path uses 4 edges and violates the 'at most 3 edges' constraint. With ≤3 edges the best achievable weight is 8."
          },
          {
            "id": 1,
            "text": "8",
            "feedback": "Correct. Path 1->0->4->2 has weights 1+4+3 = 8 and uses 3 edges. Direct 1->2 is 12 and the best 2-edge path is 1->0->2 = 9, so 8 is the minimum with ≤3 edges."
          },
          {
            "id": 2,
            "text": "9",
            "feedback": "Incorrect. Paths of weight 9 exist (for example 1->0->2 = 1+8 = 9 or 1->3->4->2 = 4+2+3 = 9), but a smaller weight 8 is achievable with 3 edges."
          },
          {
            "id": 3,
            "text": "10",
            "feedback": "Incorrect. Weight 10 is not the minimum under the ≤3-edges constraint because there exists a 3-edge path of weight 8 (1->0->4->2 = 1+4+3)."
          }
        ]
      },
      "answer": {
        "correctOption": 1,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Correct. Path 1->0->4->2 has weights 1+4+3 = 8 and uses 3 edges. Direct 1->2 is 12 and the best 2-edge path is 1->0->2 = 9, so 8 is the minimum with ≤3 edges.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3944,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subject": "Algorithm",
        "topic": "Spanning Tree",
        "subtopic": "Multiple Topics"
      },
      "content": {
        "questionText": "Consider a complete undirected graph with vertex set {0, 1, 2, 3, 4}. Entry Wij in the matrix W below is the weight of the edge {i, j}. W =  \\(\\begin{pmatrix} 0 & 1 & 8 & 1 & 4 \\\\ 1 & 0 & 12 & 4 & 9 \\\\ 8 & 12 & 0 & 7 & 3 \\\\ 1 & 4 & 7 & 0 & 2 \\\\ 4 & 9 & 3 & 2 & 0 \\end{pmatrix}\\) What is the minimum possible weight of a spanning tree T in this graph such that vertex 0 is a leaf node in the tree T?",
        "options": [
          {
            "id": 0,
            "text": "7",
            "feedback": ""
          },
          {
            "id": 1,
            "text": "8",
            "feedback": ""
          },
          {
            "id": 2,
            "text": "9",
            "feedback": ""
          },
          {
            "id": 3,
            "text": "10",
            "feedback": ""
          }
        ]
      },
      "answer": {
        "correctOption": 3,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "",
      "metadata": {
        "status": "READY_FOR_SME"
      }
    },
    {
      "questionId": 3943,
      "type": "MCQ",
      "difficulty": "ADVANCED",
      "topology": {
        "subject": "COA",
        "topic": "Memory Management",
        "subtopic": "Multiple Topics"
      },
      "content": {
        "questionText": "A computer system has an L1 cache, an L2 cache, and a main memory unit connected as shown below. The block size in L1 cache is 4 words. The block size in L2 cache is 16 words. The memory access times are 2 nanoseconds. 20 nanoseconds and 200 nanoseconds for L1 cache, L2 cache and main memory unit respectively.  When there is a miss in both L1 cache and L2 cache, first a block is transferred from main memory to L2 cache, and then a block is transferred from L2 cache to L1 cache. What is the total time taken for these transfers?",
        "options": [
          {
            "id": 0,
            "text": "222 nanoseconds",
            "feedback": "222 nanoseconds is too small. That value would match simply adding one main-memory access (200 ns), one L2 access (20 ns), and one L1 access (2 ns) as if the entire 16-word block moved in a single 4-word bus transfer. But the main memory block is 16 words and the bus width is 4 words, so the 16-word block requires four separate 4-word transfers from main memory to L2. Each of those transfers incurs the main-memory access time and the L2 access time."
          },
          {
            "id": 1,
            "text": "888 nanoseconds",
            "feedback": "888 nanoseconds is close but still incorrect. It matches computing four 4-word transfers from main memory to L2 as 4 × (200 ns) = 800 ns plus four internal L2 accesses as 4 × (20 ns) = 80 ns, giving 880 ns in total. That calculation misses the final transfer from L2 to L1: when L2 supplies the 4-word block to L1 there is one L2 access (20 ns) and one L1 access (2 ns) for that transfer, adding 22 ns and bringing the total to 902 ns."
          },
          {
            "id": 2,
            "text": "902 nanoseconds",
            "feedback": "902 nanoseconds is correct. Reasoning: the 16-word block is transferred from main memory to L2 in four 4-word bus transfers; each transfer costs the main-memory access time (200 ns) plus the L2 access time (20 ns), so 4 × (200 + 20) = 880 ns. Then L2 supplies the 4-word block to L1 in one 4-word transfer costing L2 access (20 ns) plus L1 access (2 ns) = 22 ns. Total = 880 + 22 = 902 ns."
          },
          {
            "id": 3,
            "text": "968 nanoseconds",
            "feedback": "968 nanoseconds is too large. It likely results from double-counting some access times or assuming more than one 4-word transfer from L2 to L1. The correct breakdown counts four 4-word transfers from main memory to L2 (4 × (200 + 20) = 880 ns) and one 4-word transfer from L2 to L1 (20 + 2 = 22 ns), totaling 902 ns. 968 ns does not match this correct accounting."
          }
        ]
      },
      "answer": {
        "correctOption": 2,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key insight:  transfers happen in 4-word bus beats. The 16-word block from main memory arrives at L2 in four 4-word transfers, and L2 then supplies one 4-word transfer to L1. Main memory → L2: 16-word block, bus width 4 words ⇒ 4 transfers. Each transfer incurs main-memory access (200 ns) plus L2 access (20 ns) = 220 ns per transfer. Total = 4 × 220 ns = 880 ns. L2 → L1: L1 block size is 4 words, so L2 sends one 4-word transfer. That transfer costs L2 access (20 ns) plus L1 access (2 ns) = 22 ns. Total time for both transfers = 880 ns + 22 ns = 902 ns.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3941,
      "type": "MCQ",
      "difficulty": "EXPERT",
      "topology": {
        "subject": "Computer Networks",
        "topic": "Network Layer - IP Addressing",
        "subtopic": "SubNetting In CIDR"
      },
      "content": {
        "questionText": "Suppose computers A and B have IP addresses 10.105.1.113 and 10.105.1.91 respectively and they both use the same net mask N. Which of the values of N given below should not be used if A and B should belong to the same network?",
        "options": [
          {
            "id": 0,
            "text": "255.255.255.0",
            "feedback": "Incorrect. With mask 255.255.255.0 (/24) both IPs 10.105.1.113 and 10.105.1.91 fall in the same subnet 10.105.1.0 — so this mask is acceptable when A and B should be in the same network."
          },
          {
            "id": 1,
            "text": "255.255.255.128",
            "feedback": "Incorrect. With mask 255.255.255.128 (/25) the network ranges are 10.105.1.0–10.105.1.127 and 10.105.1.128–10.105.1.255. Both addresses (91 and 113) lie in 10.105.1.0–127, so they are in the same subnet; the mask is acceptable."
          },
          {
            "id": 2,
            "text": "255.255.255.192",
            "feedback": "Incorrect. With mask 255.255.255.192 (/26) subnets are sized 64 addresses: 0–63, 64–127, 128–191, etc. Both host numbers 91 and 113 are within 64–127, so they are in the same subnet; the mask is acceptable."
          },
          {
            "id": 3,
            "text": "255.255.255.224",
            "feedback": "Correct. With mask 255.255.255.224 (/27) subnets are 32-address blocks: 0–31,32–63,64–95,96–127,... The addresses 91 and 113 fall into different /27 subnets: 91 is in 64–95 while 113 is in 96–127 — so this mask would place A and B on different networks."
          }
        ]
      },
      "answer": {
        "correctOption": 3,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Correct. With mask 255.255.255.224 (/27) subnets are 32-address blocks: 0–31,32–63,64–95,96–127,... The addresses 91 and 113 fall into different /27 subnets: 91 is in 64–95 while 113 is in 96–127 — so this mask would place A and B on different networks.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3940,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subject": "Operating System",
        "topic": "Deadlock",
        "subtopic": "Necessary Conditions for Deadlock"
      },
      "content": {
        "questionText": "A system has n resources R 0 ,...,R n-1 , and k processes P 0 ,....P k-1 . The implementation of the resource request logic of each process P i  . is as follows: \n\n if (i % 2 == 0) {\n\n      if (i < n) request R<sub>i</sub>\n\n      if (i+2 < n) request R<sub>i+2</sub>\n\n}\n\nelse {\n\n      if (i < n) request R<sub>n-i</sub>\n\n      if (i+2 < n) request R<sub>n-i-2</sub>\n\n} In which one of the following situations is a deadlock possible?",
        "options": [
          {
            "id": 0,
            "text": "n=40, k=26",
            "feedback": ""
          },
          {
            "id": 1,
            "text": "n=21, k=12",
            "feedback": ""
          },
          {
            "id": 2,
            "text": "n=20, k=10",
            "feedback": ""
          },
          {
            "id": 3,
            "text": "n=41, k=19",
            "feedback": ""
          }
        ]
      },
      "answer": {
        "correctOption": 1,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "",
      "metadata": {
        "status": "AI_REVIEW_FAILED"
      }
    },
    {
      "questionId": 3939,
      "type": "MCQ",
      "difficulty": "ADVANCED",
      "topology": {
        "subject": "Operating System",
        "topic": "Process Synchronisation",
        "subtopic": "Semaphore"
      },
      "content": {
        "questionText": "The following program consists of 3 concurrent processes and 3 binary semaphores. The semaphores are initialized as S0=1, S1=0, S2=0. \\(\\begin{array}{|l|l|}\\hline \\text{Process P0}  &  \\text{Process P1} & \\text{Process P2} \\\\ \\hline  \\text{while (true) \\{} & \\text{wait (S1);} & \\text{wait (S2);} \\\\  \\text{    wait (S0);} & \\text{release (S0);} & \\text{release (S0);} \\\\  \\text{   print ‘0';} & &  \\\\  \\text{   release (S1);} & & \\\\  \\text{   release (S2);} & \\text{} & \\text{} \\\\ \\text{\\}}  &  \\text{}   \\\\\\hline \\end{array}\\) How many times will process P0 print ‘0’?",
        "options": [
          {
            "id": 0,
            "text": "At least twice",
            "feedback": "Correct. Initially P0 can run (S0 = 1), it waits S0, prints '0', and releases S1 and S2. That makes P1 and/or P2 runnable; at least one of them will run and release S0, so P0 will be able to run again. In fact the cycle can repeat indefinitely, so P0 prints '0' at least twice (and can print it many more times)."
          },
          {
            "id": 1,
            "text": "Exactly twice",
            "feedback": "Incorrect. While it is possible for scheduling to produce exactly two prints in some interleavings, nothing guarantees the sequence stops at two. After each time P0 prints it signals S1 and S2, enabling P1 and P2 to release S0 again, so further prints are possible. Therefore \"Exactly twice\" is not guaranteed."
          },
          {
            "id": 2,
            "text": "Exactly thrice",
            "feedback": "Incorrect. There is no mechanism that limits P0 to three prints: every time P0 runs it re-enables P1 and P2, which can release S0 and allow P0 to run again. So exactly three prints is not guaranteed."
          },
          {
            "id": 3,
            "text": "Exactly once",
            "feedback": "Incorrect. After P0's first print it releases S1 and S2 which will allow P1 or P2 to run and release S0. That ensures P0 can enter at least one more time, so it cannot be limited to exactly one print."
          }
        ]
      },
      "answer": {
        "correctOption": 0,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key idea:  P0's action enables P1 and P2, and P1/P2 release S0 so P0 can run again. Start: S0 = 1, S1 = 0, S2 = 0. P0 can enter: it waits S0 (making S0 = 0), prints '0', then releases S1 and S2 (making them available). After that, P1 and P2 are enabled. Each of them, when they run, releases S0. Even if only one runs, S0 becomes available and P0 can run a second time. Because every time P0 runs it re-enables P1 and P2, which in turn release S0, the cycle can repeat indefinitely. Thus P0 is guaranteed to print '0' at least twice (and in fact can print it arbitrarily many times).",
      "metadata": {
        "status": "READY_FOR_SME"
      }
    },
    {
      "questionId": 3938,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subject": "Software Engineering",
        "topic": null,
        "subtopic": null
      },
      "content": {
        "questionText": "The following program is to be tested for statement coverage: \n\nbegin\n\n    if (a==b) {S1; exit;}\n\n    else if (c==d) {S2;}\n\n        else {S3; exit;}\n\n    S4;\n\nend The test cases T1, T2, T3 and T4 given below are expressed in terms of the properties satisfied by the values of variables a, b, c and d. The exact values are not given. T1 : a, b, c and d are all equal T2 : a, b, c and d are all distinct T3 : a = b and c != d T4 : a != b and c = d Which of the test suites given below ensures coverage of statements S1, S2, S3 and S4?",
        "options": [
          {
            "id": 0,
            "text": "T1, T2, T3",
            "feedback": ""
          },
          {
            "id": 1,
            "text": "T2, T4",
            "feedback": ""
          },
          {
            "id": 2,
            "text": "T3, T4",
            "feedback": ""
          },
          {
            "id": 3,
            "text": "T1, T2, T4",
            "feedback": ""
          }
        ]
      },
      "answer": {
        "correctOption": 3,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "",
      "metadata": {
        "status": "READY_FOR_SME"
      }
    },
    {
      "questionId": 3937,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subject": "Data Base Management System",
        "topic": "Relational Algebra",
        "subtopic": "Natural Join Operator"
      },
      "content": {
        "questionText": "The following functional dependencies hold for relations R(A, B, C) and S(B, D, E) B → A, A → C The relation R contains 200 tuples and the relation S contains 100 tuples. What is the maximum number of tuples possible in the natural join R  \\( \\bowtie \\)  S?",
        "options": [
          {
            "id": 0,
            "text": "100",
            "feedback": "Correct. Because B → A and A → C imply B → A,C, B functionally determines all attributes of R. Therefore each value of B appears in at most one tuple of R, so each tuple of S can match at most one tuple of R. If all B values in S appear in R, the join has 100 tuples (one per tuple of S), which is the maximum."
          },
          {
            "id": 1,
            "text": "200",
            "feedback": "Incorrect. Although R has 200 tuples, B → A and A → C make B a key for R (each B appears in at most one R-tuple). Since S has only 100 tuples and each S-tuple can match at most one R-tuple, the join cannot exceed 100."
          },
          {
            "id": 2,
            "text": "300",
            "feedback": "Incorrect. 300 would require more matches than there are tuples in S. Because B determines all attributes of R, each S-tuple matches at most one R-tuple, so the maximum number of join tuples is |S| = 100."
          },
          {
            "id": 3,
            "text": "2000",
            "feedback": "Incorrect. 2000 is the product 200×100 (a Cartesian product). A natural join on B cannot produce the full Cartesian product here because B determines R, so each S-tuple matches at most one R-tuple; the join cannot reach 2000 and is at most 100."
          }
        ]
      },
      "answer": {
        "correctOption": 0,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Answer: 100 Reasoning: From the functional dependencies B → A and A → C, by transitivity we get B → A,C. So B functionally determines all attributes of relation R. Therefore, within R each value of B can appear in at most one tuple (B is a key for R). A natural join between R and S matches tuples on B. Because each B value in S can match at most one tuple in R, each tuple of S contributes at most one tuple to the join. S has 100 tuples, so the join can have at most 100 tuples. This bound is achievable if every B value present in S also appears in R (with at most one matching R tuple per B), in which case the join produces exactly 100 tuples.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3936,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subject": "Data Base Management System",
        "topic": "Transaction Management",
        "subtopic": "Conflict Serializable"
      },
      "content": {
        "questionText": "Consider the following schedule for transactions  \\(T1, T2\\)  and  \\(T3\\) : \\(\\begin{array}{|c|c|c|}\\hline \\textbf{T1} & \\textbf{T2} & \\textbf{T3} \\\\\\hline  \\text{Read(X)} & \\text{} & \\text{} \\\\\\hline   \\text{} & \\text{Read(Y)} & \\text{} \\\\\\hline  \\text{} & \\text{} & \\text{Read(Y)} \\\\\\hline \\text{} & \\text{Write(Y)} & \\text{} \\\\\\hline  \\text{Write(X)} & \\text{} & \\text{} \\\\\\hline  \\text{} & \\text{} & \\text{Write(X)} \\\\\\hline  \\text{} & \\text{Read(X)} & \\text{} \\\\\\hline \\text{} & \\text{Write(X)} & \\text{} \\\\\\hline\\end{array}\\) Which one of the schedules below is the correct serialization of the above?",
        "options": [
          {
            "id": 0,
            "text": "\\(T1 \\to T3 \\to T2\\)",
            "feedback": "Correct. Build the precedence (conflict) graph from the timeline: T1's operations on X (Read(X) then Write(X)) occur before T3's Write(X) and before T2's later Read(X)/Write(X), and T3's Read(Y) happens before T2's Write(Y). These conflicts create edges T1 -> T3, T1 -> T2, and T3 -> T2, so a serial order consistent with these edges is T1 → T3 → T2."
          },
          {
            "id": 1,
            "text": "\\(T2 \\to T1 \\to T3\\)",
            "feedback": "Incorrect. This order places T2 before T1, but T1 performs Write(X) before T2 later reads/writes X. That write-read and write-write conflict requires T1 to come before T2, so T2 cannot be first."
          },
          {
            "id": 2,
            "text": "\\(T2 \\to T3 \\to T1\\)",
            "feedback": "Incorrect. This order puts T1 after T3, but T1's Read(X) and Write(X) occur before T3's Write(X). Those read-write and write-write conflicts force T1 to precede T3, so T1 cannot be last."
          },
          {
            "id": 3,
            "text": "\\(T3 \\to T1 \\to T2\\)",
            "feedback": "Incorrect. This order places T3 before T1, but T1 performs operations on X (Read(X) then Write(X)) that occur before T3's Write(X). Those conflicts require T1 -> T3, so T3 cannot come before T1."
          }
        ]
      },
      "answer": {
        "correctOption": 0,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key insight:  construct the precedence graph from conflicting operations. Timeline of operations (top to bottom): T1: Read(X); T2: Read(Y); T3: Read(Y); T2: Write(Y); T1: Write(X); T3: Write(X); T2: Read(X); T2: Write(X). Identify conflicts and add directed edges: Between T1 and T3 on X: T1's Read(X) and Write(X) occur before T3's Write(X) → conflicts produce edge T1 → T3. Between T1 and T2 on X: T1's Write(X) occurs before T2's later Read(X)/Write(X) → edge T1 → T2. Between T3 and T2 on Y and X: T3's Read(Y) occurs before T2's Write(Y), and T3's Write(X) occurs before T2's Read/Write(X) → edge T3 → T2. Precedence graph edges: T1 → T3, T1 → T2, T3 → T2. A topological ordering consistent with these edges is T1, then T3, then T2. Therefore the correct serial schedule equivalent to the given interleaving is T1 → T3 → T2.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3935,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subject": "Theory of Computation",
        "topic": "NDFA",
        "subtopic": "Ndfa Designing Basic"
      },
      "content": {
        "questionText": "Let w be any string of length  \\(n\\)  in  \\(\\{0, 1\\}^*\\) . Let  \\(L\\)  be the set of all substrings of  \\(w\\) . What is the minimum number of states in a non-deterministic finite automaton that accepts  \\(L\\) ?",
        "options": [
          {
            "id": 0,
            "text": "\\(n - 1\\)",
            "feedback": ""
          },
          {
            "id": 1,
            "text": "\\(n\\)",
            "feedback": ""
          },
          {
            "id": 2,
            "text": "\\(n + 1 \\)",
            "feedback": ""
          },
          {
            "id": 3,
            "text": "\\(2^{n -1 }\\)",
            "feedback": ""
          }
        ]
      },
      "answer": {
        "correctOption": 2,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "",
      "metadata": {
        "status": "READY_FOR_SME"
      }
    },
    {
      "questionId": 3934,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subject": "Theory of Computation",
        "topic": "Context Free language",
        "subtopic": "Context free Language Identification"
      },
      "content": {
        "questionText": "Consider the languages \\(L1=\\{0^i1^j\\ \\mid i \\neq j\\},\\) \\(L2=\\{0^i1^j\\mid i=j\\},\\) \\(L3=\\{0^i1^j \\mid i=2j+1\\},\\) \\(L4=\\{0^i1^j \\mid i\\neq2j\\}\\) Which one of the following statements is true?",
        "options": [
          {
            "id": 0,
            "text": "Only  \\(L_2\\)  is context free",
            "feedback": ""
          },
          {
            "id": 1,
            "text": "Only  \\(L_2\\)  and  \\(L_3\\)  are context free",
            "feedback": ""
          },
          {
            "id": 2,
            "text": "Only  \\(L_1\\)  and  \\(L_2\\)  are context free",
            "feedback": ""
          },
          {
            "id": 3,
            "text": "All are context free",
            "feedback": ""
          }
        ]
      },
      "answer": {
        "correctOption": 3,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "",
      "metadata": {
        "status": "READY_FOR_SME"
      }
    },
    {
      "questionId": 3933,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subject": "Theory of Computation",
        "topic": "Regular Expression",
        "subtopic": "Regular Expression Designing Basic"
      },
      "content": {
        "questionText": "Let  \\(L=\\{ w \\in \\:(0+1)^* \\mid w\\text{ has even number of }1s \\}\\)  i.e.  \\(L\\)  is the set of all bit strings with even number of 1s. Which one of the regular expressions below represents  \\(L\\) ?",
        "options": [
          {
            "id": 0,
            "text": "\\((0^*10^*1)^*\\)",
            "feedback": ""
          },
          {
            "id": 1,
            "text": "\\(0^*(10^*10^*)^*\\)",
            "feedback": ""
          },
          {
            "id": 2,
            "text": "\\(0^*(10^*1)^*0^*\\)",
            "feedback": ""
          },
          {
            "id": 3,
            "text": "\\(0^*(10^*1)^*0^*\\)",
            "feedback": ""
          }
        ]
      },
      "answer": {
        "correctOption": 1,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "",
      "metadata": {
        "status": "READY_FOR_SME"
      }
    },
    {
      "questionId": 3932,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subject": "Compiler Design",
        "topic": "Syntax Analysis-Top Down Parsing",
        "subtopic": "LL(1) Parser"
      },
      "content": {
        "questionText": "The grammar S  \\(\\to\\)  aSa|bS|c is",
        "options": [
          {
            "id": 0,
            "text": "LL(1) but not LR(1)",
            "feedback": ""
          },
          {
            "id": 1,
            "text": "LR(1) but not LR(1)",
            "feedback": ""
          },
          {
            "id": 2,
            "text": "Both LL(1) and LR(1)",
            "feedback": ""
          },
          {
            "id": 3,
            "text": "Neither LL(1) nor LR(1)",
            "feedback": ""
          }
        ]
      },
      "answer": {
        "correctOption": 2,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "",
      "metadata": {
        "status": "READY_FOR_SME"
      }
    },
    {
      "questionId": 3931,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subject": "Compiler Design",
        "topic": "Code Optimization",
        "subtopic": "Liveness Analysis"
      },
      "content": {
        "questionText": "The program below uses six temporary variables a, b, c, d, e, f. \n\na = 1 \n\nb = 10\n\nc = 20 \n\nd = a + b\n\ne = c + d \n\nf = c + e \n\nb = c + e \n\ne = b + f \n\nd = 5 + e\n\nreturn d + f  Assuming that all operations take their operands from registers, what is the minimum number of registers needed to execute thi s program without spilling?",
        "options": [
          {
            "id": 0,
            "text": "2",
            "feedback": ""
          },
          {
            "id": 1,
            "text": "3",
            "feedback": ""
          },
          {
            "id": 2,
            "text": "4",
            "feedback": ""
          },
          {
            "id": 3,
            "text": "6",
            "feedback": ""
          }
        ]
      },
      "answer": {
        "correctOption": 1,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "",
      "metadata": {
        "status": "READY_FOR_SME"
      }
    },
    {
      "questionId": 3930,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subject": "Data Structure",
        "topic": "Link List",
        "subtopic": "Insertion Deletion"
      },
      "content": {
        "questionText": "The following C function takes a simply-linked list as input argument. It modifies the list by moving the last element to the front of the list and returns the modified list. Some part of the code is left blank. \n\ntypedef struct node \n\n{\n\n    int value;\n\n    struct node *next;\n\n} Node;    \n\nNode *move_to-front(Node *head) \n\n{\n\n    Node *p, *q;\n\n    if ((head == NULL) || (head -> next == NULL))\n\n        return head;\n\n    q = NULL; \n\n    p = head;\n\n    while (p->next != NULL)\n\n    {\n\n        q=p;\n\n        p=p->next;\n\n    }\n\n    _______________ \n\n    \n\n    return head;  \n\n    \n\n}    Choose the correct alternative to replace the blank line.",
        "options": [
          {
            "id": 0,
            "text": "q = NULL; p->next = head; head = p;",
            "feedback": ""
          },
          {
            "id": 1,
            "text": "q->next = NULL; head = p; p->next = head;",
            "feedback": ""
          },
          {
            "id": 2,
            "text": "head = p; p->next = q; q->next = NULL;",
            "feedback": ""
          },
          {
            "id": 3,
            "text": "q->next = NULL; p->next = head; head = p;",
            "feedback": ""
          }
        ]
      },
      "answer": {
        "correctOption": 3,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "",
      "metadata": {
        "status": "READY_FOR_SME"
      }
    },
    {
      "questionId": 3929,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subject": "C Programming",
        "topic": "Pointers",
        "subtopic": "Pointers with other Concepts"
      },
      "content": {
        "questionText": "What is the value printed by the following C program? \n\n#include<stdio.h>\n\n\n\nint f(int *a, int n)\n\n{\n\n    if (n <= 0) return 0;\n\n    else if (*a % 2 == 0) return *a+f(a+1, n-1);\n\n    else return *a - f(a+1, n-1);\n\n}\n\n\n\nint main()\n\n{\n\n    int a[] = {12, 7, 13, 4, 11, 6};\n\n    printf(\"%d\", f(a, 6));\n\n    return 0;\n\n}",
        "options": [
          {
            "id": 0,
            "text": "-9",
            "feedback": ""
          },
          {
            "id": 1,
            "text": "5",
            "feedback": ""
          },
          {
            "id": 2,
            "text": "15",
            "feedback": ""
          },
          {
            "id": 3,
            "text": "19",
            "feedback": ""
          }
        ]
      },
      "answer": {
        "correctOption": 2,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "",
      "metadata": {
        "status": "READY_FOR_SME"
      }
    },
    {
      "questionId": 3928,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subject": "Algorithm",
        "topic": "Dynamic Programming",
        "subtopic": "Longest commom Subsequence"
      },
      "content": {
        "questionText": "The weight of a sequence  \\(a_0,a_1, \\dots, a_{n-1}\\)  of real numbers is defined as  \\(a_0+a_1/2+ \\dots + a_{n-1}/2^{n-1}\\) . A subsequence of a sequence is obtained by deleting some elements from the sequence, keeping the order of the remaining elements the same. Let  \\(X\\)  denote the maximum possible weight of a subsequence of  \\(a_o,a_1, \\dots, a_{n-1}\\)  and  \\(Y\\)  the maximum possible weight of a subsequence of  \\(a_1,a_2, \\dots, a_{n-1}\\) . Then  \\(X\\)  is equal to",
        "options": [
          {
            "id": 0,
            "text": "\\(max(Y, a_0+Y)\\)",
            "feedback": ""
          },
          {
            "id": 1,
            "text": "\\(max(Y, a_0+Y/2)\\)",
            "feedback": ""
          },
          {
            "id": 2,
            "text": "\\(max(Y, a_0 +2Y)\\)",
            "feedback": ""
          },
          {
            "id": 3,
            "text": "\\(a_0+Y/2\\)",
            "feedback": ""
          }
        ]
      },
      "answer": {
        "correctOption": 1,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "",
      "metadata": {
        "status": "READY_FOR_SME"
      }
    },
    {
      "questionId": 3927,
      "type": "MCQ",
      "difficulty": "ADVANCED",
      "topology": {
        "subject": "COA",
        "topic": "Pipelining",
        "subtopic": "Data Hazards"
      },
      "content": {
        "questionText": "A 5-stage pipelined processor has Instruction Fetch (IF), Instruction Decode (ID), Operand Fetch (OF), Perform Operation (PO) and Write Operand (WO) stages. The IF, ID, OF and WO stages take 1 clock cycle each for any instruction. The PO stage takes 1 clock cycle for ADD and SUB instructions, 3 clock cycles for MUL instruction, and 6 clock cycles for DIV instruction respectively. Operand forwarding is used in the pipeline. What is the number of clock cycles needed to execute the following sequence of instructions? \\(\\begin{array} c{}  \\textbf {Instruction} &  \\textbf{Meaning of instruction}  \\\\  \\text{$I _0$: MUL $R _2$,$R _0$,$R _1$} & \\text{R}_2  \\gets \\text{R}_0*\\text{R}_1\\\\  \\text{$I _1$: DIV $R _5,R _3,R _4$} & \\text{R}_5 \\gets \\text{R}_3 ∕ \\text{R}_4\\\\   \\text{$I _2$: ADD $R _2,R _5,R _2$} & \\text{R}_2 \\gets \\text{R}_5 + \\text{R}_2 \\\\ I_3: \\text{SUB} \\:\\text{R}_5,\\text{R}_2,\\text{R}_6 & \\text{R}_5 \\gets \\text{R}_2 - \\text{R}_6  \\\\\\end{array}\\)",
        "options": [
          {
            "id": 0,
            "text": "13",
            "feedback": ""
          },
          {
            "id": 1,
            "text": "15",
            "feedback": ""
          },
          {
            "id": 2,
            "text": "17",
            "feedback": ""
          },
          {
            "id": 3,
            "text": "19",
            "feedback": ""
          }
        ]
      },
      "answer": {
        "correctOption": 1,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "",
      "metadata": {
        "status": "READY_FOR_SME"
      }
    },
    {
      "questionId": 3926,
      "type": "MCQ",
      "difficulty": "ADVANCED",
      "topology": {
        "subject": "Digital Electronics",
        "topic": "Sequential Circuit",
        "subtopic": "Synchronous Counters"
      },
      "content": {
        "questionText": "In the sequential circuit shown below, if the initial value of the output  \\(Q_1Q_0\\)  is 00, what are the next four values of  \\(Q_1Q_0\\) ?",
        "options": [
          {
            "id": 0,
            "text": "11,10,01,00",
            "feedback": "Correct. The left T input is 1 so Q0 toggles every clock. The right flip-flop's T input is the complement of Q0, so Q1 toggles when Q0 (before the clock) is 0. Step-by-step from Q1Q0 = 00: Clock 1 -> 11; Clock 2 -> 10; Clock 3 -> 01; Clock 4 -> 00. Hence the next four values are 11, 10, 01, 00."
          },
          {
            "id": 1,
            "text": "10,11,01,00",
            "feedback": "Incorrect. From 00, Q0 toggles to 1 and the right T = NOT(Q0) = 1, so Q1 also toggles to 1. The first next state must be 11, not 10. Therefore the sequence 10, 11, 01, 00 is wrong."
          },
          {
            "id": 2,
            "text": "10,00,01,11",
            "feedback": "Incorrect. The first next state from 00 must be 11 (both bits become 1), so a sequence that starts with 10 is incorrect. This sequence also doesn't follow the correct Q1 toggling rule (Q1 toggles when Q0 = 0)."
          },
          {
            "id": 3,
            "text": "11,10,00,01",
            "feedback": "Incorrect. The first two states 11, 10 match the correct behavior, but the third state should be 01. From 10 (Q1=1,Q0=0), Q0 toggles to 1 and T for Q1 = NOT(0) = 1 so Q1 toggles to 0 → state 01. This sequence gives 00 instead, so it is wrong."
          }
        ]
      },
      "answer": {
        "correctOption": 0,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Correct. The left T input is 1 so Q0 toggles every clock. The right flip-flop's T input is the complement of Q0, so Q1 toggles when Q0 (before the clock) is 0. Step-by-step from Q1Q0 = 00: Clock 1 -> 11; Clock 2 -> 10; Clock 3 -> 01; Clock 4 -> 00. Hence the next four values are 11, 10, 01, 00.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3925,
      "type": "MCQ",
      "difficulty": "ADVANCED",
      "topology": {
        "subject": "Digital Electronics",
        "topic": "Logic Gates",
        "subtopic": "Universal Gates"
      },
      "content": {
        "questionText": "What is the Boolean expression for the output  \\(f\\)  of the combinational logic circuit of NOR gates given below?",
        "options": [
          {
            "id": 0,
            "text": "\\(\\overline{Q+R}\\)",
            "feedback": "Correct. If you name the first-stage outputs A = not(P+Q) and B = not(Q+R), then the next-stage output combining those is not(A + B) = (P+Q)(Q+R). Doing the same for the lower branch gives (P+R)(Q+R). The sum of those two terms simplifies to Q+R, so the final NOR produces not(Q+R)."
          },
          {
            "id": 1,
            "text": "\\(\\overline{P+Q}\\)",
            "feedback": "Incorrect. The circuit simplifies to not(Q+R), not not(P+Q). Although not(P+Q) appears as one intermediate signal, the rest of the network combines signals so that the final output depends only on Q and R (specifically not(Q+R))."
          },
          {
            "id": 2,
            "text": "\\(\\overline{P+R}\\)",
            "feedback": "Incorrect. not(P+R) is another intermediate output in the circuit, but after the further NOR stages the combined expression reduces to not(Q+R). The final result does not equal not(P+R)."
          },
          {
            "id": 3,
            "text": "\\(\\overline{P+Q+R}\\)",
            "feedback": "Incorrect. The expression not(P+Q+R) is too broad — the circuit actually factors so the final OR before the last inversion equals Q+R, not P+Q+R. Therefore the final output is not(Q+R), not not(P+Q+R)."
          }
        ]
      },
      "answer": {
        "correctOption": 0,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key idea:  treat each NOR as an inverted OR and apply De Morgan to simplify. Let A = not(P+Q), B = not(Q+R), C = not(P+R), D = not(Q+R). The second-stage NOR outputs are E = not(A + B) and F = not(C + D). Using De Morgan, E = (P+Q)(Q+R) and F = (P+R)(Q+R). Combine E and F: E + F = (Q+R)[(P+Q)+(P+R)] = (Q+R)(P+Q+R) = Q+R. The final output is the NOR of E and F, so f = not(E + F) = not(Q+R). Answer: f = not(Q+R).",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3924,
      "type": "MCQ",
      "difficulty": "ADVANCED",
      "topology": {
        "subject": "Discrete Mathematics",
        "topic": "Proposition",
        "subtopic": "Questions From Quantifier"
      },
      "content": {
        "questionText": "Suppose the predicate  \\( F(x, y, t)\\)  is used to represent the statement that person  \\(x\\)  can fool person  \\(y\\)  at time  \\(t\\) . which one of the statements below expresses best the meaning of the formula  \\(∀x∃y∃t(¬F(x, y, t))\\)  ?",
        "options": [
          {
            "id": 0,
            "text": "Everyone can fool some person at some time",
            "feedback": "Incorrect. This statement says for every person there is someone and a time that the person can fool (formal: ∀x∃y∃t F(x,y,t)). The given formula has ¬F inside, so it asserts the opposite — for each person there is someone and a time they cannot fool."
          },
          {
            "id": 1,
            "text": "No one can fool everyone all the time",
            "feedback": "Correct. ∀x∃y∃t ¬F(x,y,t) means: for each person x there exists a person y and a time t such that x does not fool y at that time. This is equivalent to ¬∃x∀y∀t F(x,y,t), which reads “there is no person who can fool every person at every time” — i.e. “No one can fool everyone all the time.”"
          },
          {
            "id": 2,
            "text": "Everyone cannot fool some person all the time",
            "feedback": "Incorrect. The phrase usually means for each person there is someone they never fool (formal: ∀x∃y∀t ¬F(x,y,t)), which requires the failure to fool to hold for all times. The given formula only requires some time when the fooling fails (∃t), so this option is stronger and not equivalent."
          },
          {
            "id": 3,
            "text": "No one can fool some person at some time",
            "feedback": "Incorrect. This denies that any person can fool some person at some time (formal: ¬∃x∃y∃t F(x,y,t), equivalent to ∀x∀y∀t ¬F(x,y,t)), i.e. nobody can fool anyone ever. That is much stronger than the given formula, which only requires for each person there is someone and a time they fail to fool."
          }
        ]
      },
      "answer": {
        "correctOption": 1,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Formal reading:  For every person x there exists a person y and a time t such that x does not fool y at time t (i.e. ∀x∃y∃t ¬F(x,y,t)). Equivalence:  This formula is equivalent to ¬∃x∀y∀t F(x,y,t). In words: it is not the case that there exists a person who can fool every person at every time. Natural-language paraphrase:  \"No one can fool everyone all the time.\" Why other phrasings are incorrect: The statement \"Everyone can fool some person at some time\" affirms that for each person there exists someone and a time they can fool; the given formula instead asserts that for each person there exists someone and a time they do not fool, so these are opposites. The statement \"Everyone cannot fool some person all the time\" means each person has someone they never fool (failure for every time), whereas the formula requires only the existence of at least one time when they do not fool that person (weaker condition). The statement \"No one can fool some person at some time\" denies that any fooling ever occurs (no person fools any person at any time), which is a much stronger claim than the given formula that only requires each person has at least one person and one time they fail to fool.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3923,
      "type": "MCQ",
      "difficulty": "BEGINNER",
      "topology": {
        "subject": "Engineering Maths",
        "topic": null,
        "subtopic": null
      },
      "content": {
        "questionText": "Consider the following matrix \\(A = \\left[\\begin{array}{cc}2 & 3\\\\x & y \\end{array}\\right]\\) If the eigenvalues of A are 4 and 8, then",
        "options": [
          {
            "id": 0,
            "text": "x = 4, y = 10",
            "feedback": ""
          },
          {
            "id": 1,
            "text": "x=5, y=8",
            "feedback": ""
          },
          {
            "id": 2,
            "text": "x=-3, y=9",
            "feedback": ""
          },
          {
            "id": 3,
            "text": "x= -4, y=10",
            "feedback": ""
          }
        ]
      },
      "answer": {
        "correctOption": 3,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "",
      "metadata": {
        "status": "READY_FOR_SME"
      }
    },
    {
      "questionId": 3922,
      "type": "MCQ",
      "difficulty": "ADVANCED",
      "topology": {
        "subject": "Discrete Mathematics",
        "topic": "Graph Theory",
        "subtopic": "Degree of Vertex"
      },
      "content": {
        "questionText": "The degree sequence of a simple graph is the sequence of the degrees of the nodes in the graph in decreasing order. Which of the following sequences can not be the degree sequence of any graph? I. 7, 6, 5, 4, 4, 3, 2, 1       II. 6, 6, 6, 6, 3, 3, 2, 2 III. 7, 6, 6, 4, 4, 3, 2, 2     IV. 8, 7, 7, 6, 4, 2, 1, 1",
        "options": [
          {
            "id": 0,
            "text": "I and II",
            "feedback": "Incorrect. The sequence 7, 6, 5, 4, 4, 3, 2, 1 is a valid degree sequence (Havel-Hakimi reduces it to all zeros), while 6, 6, 6, 6, 3, 3, 2, 2 is not (it fails the Erdős–Gallai inequality). So the claim that both cannot be degree sequences is false."
          },
          {
            "id": 1,
            "text": "III and IV",
            "feedback": "Incorrect. The sequence 7, 6, 6, 4, 4, 3, 2, 2 is graphical (it satisfies the Erdős–Gallai conditions), but 8, 7, 7, 6, 4, 2, 1, 1 is impossible because a vertex cannot have degree 8 in an 8-vertex simple graph. Thus the claim that both cannot be degree sequences is false."
          },
          {
            "id": 2,
            "text": "IV only",
            "feedback": "Incorrect. While 8, 7, 7, 6, 4, 2, 1, 1 is indeed impossible (a vertex cannot have degree 8 in an 8-vertex simple graph), the sequence 6, 6, 6, 6, 3, 3, 2, 2 is also non-graphical (it violates Erdős–Gallai at k=4). So saying only the fourth sequence is non-graphical is wrong."
          },
          {
            "id": 3,
            "text": "II and IV",
            "feedback": "Correct. Both listed sequences cannot occur as degree sequences: 6, 6, 6, 6, 3, 3, 2, 2 violates the Erdős–Gallai inequality (for k = 4 the left side is 24 but the right side is 22), and 8, 7, 7, 6, 4, 2, 1, 1 is impossible because a vertex cannot have degree 8 in an 8-vertex simple graph."
          }
        ]
      },
      "answer": {
        "correctOption": 3,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Correct answer: the sequences 6, 6, 6, 6, 3, 3, 2, 2 and 8, 7, 7, 6, 4, 2, 1, 1 cannot be degree sequences. 6, 6, 6, 6, 3, 3, 2, 2 fails the Erdős–Gallai inequality for k = 4: the sum of the first four degrees is 24, while the right-hand side equals 4·3 + (min(3,4)+min(3,4)+min(2,4)+min(2,4)) = 12 + 3 + 3 + 2 + 2 = 22, so 24 > 22 and the sequence is not graphical. 8, 7, 7, 6, 4, 2, 1, 1 is impossible because in a simple graph on 8 vertices the maximum possible degree is 7, so a degree of 8 cannot occur. Quick notes on the other sequences: 7, 6, 5, 4, 4, 3, 2, 1 is graphical (Havel-Hakimi reduces it to all zeros). 7, 6, 6, 4, 4, 3, 2, 2 satisfies the Erdős–Gallai inequalities and is graphical.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3921,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subject": "Aptitude",
        "topic": "Probability",
        "subtopic": null
      },
      "content": {
        "questionText": "What is the probability that divisor of 10 99  is a multiple of 10 96 ?",
        "options": [
          {
            "id": 0,
            "text": "1/625",
            "feedback": ""
          },
          {
            "id": 1,
            "text": "4/625",
            "feedback": ""
          },
          {
            "id": 2,
            "text": "12/625",
            "feedback": ""
          },
          {
            "id": 3,
            "text": "16/625",
            "feedback": ""
          }
        ]
      },
      "answer": {
        "correctOption": 0,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "",
      "metadata": {
        "status": "READY_FOR_SME"
      }
    },
    {
      "questionId": 3920,
      "type": "MCQ",
      "difficulty": "BEGINNER",
      "topology": {
        "subject": "Aptitude",
        "topic": "Probability",
        "subtopic": null
      },
      "content": {
        "questionText": "Consider a company that assembles computers. The probability of a faulty assembly of any computer is  \\(p\\) . The company therefore subjects each computer to a testing process. This testing process gives the correct result for any computer with a probability of  \\(q\\) . What is the probability of a computer being declared faulty?",
        "options": [
          {
            "id": 0,
            "text": "\\(pq + (1 - p) (1 - q)\\)",
            "feedback": ""
          },
          {
            "id": 1,
            "text": "\\((1 - q) p\\)",
            "feedback": ""
          },
          {
            "id": 2,
            "text": "\\( (1 - p) q\\)",
            "feedback": ""
          },
          {
            "id": 3,
            "text": "\\(pq\\)",
            "feedback": ""
          }
        ]
      },
      "answer": {
        "correctOption": 0,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "",
      "metadata": {
        "status": "READY_FOR_SME"
      }
    },
    {
      "questionId": 3919,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subject": "Operating System",
        "topic": "CPU Scheduling",
        "subtopic": null
      },
      "content": {
        "questionText": "Which of the following statements are true? I. Shortest remaining time first scheduling may cause starvation II. Preemptive scheduling may cause starvation III. Round robin is better than FCFS in terms of response time",
        "options": [
          {
            "id": 0,
            "text": "I only",
            "feedback": ""
          },
          {
            "id": 1,
            "text": "I and III only",
            "feedback": ""
          },
          {
            "id": 2,
            "text": "II and III only",
            "feedback": ""
          },
          {
            "id": 3,
            "text": "I, II and III",
            "feedback": ""
          }
        ]
      },
      "answer": {
        "correctOption": 3,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "",
      "metadata": {
        "status": "READY_FOR_SME"
      }
    },
    {
      "questionId": 3918,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subject": "Operating System",
        "topic": "Virtual Memory",
        "subtopic": "First in First Out Replacement"
      },
      "content": {
        "questionText": "A system uses FIFO policy for page replacement. It has 4 page frames with no pages loaded to begin with. The system first accesses 100 distinct pages in some order and then accesses the same 100 pages but now in the reverse order. How many page faults will occur?",
        "options": [
          {
            "id": 0,
            "text": "196",
            "feedback": ""
          },
          {
            "id": 1,
            "text": "192",
            "feedback": ""
          },
          {
            "id": 2,
            "text": "197",
            "feedback": ""
          },
          {
            "id": 3,
            "text": "195",
            "feedback": ""
          }
        ]
      },
      "answer": {
        "correctOption": 0,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "",
      "metadata": {
        "status": "READY_FOR_SME"
      }
    },
    {
      "questionId": 3917,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subject": "Operating System",
        "topic": "Process Synchronisation",
        "subtopic": "Two Process Solutions"
      },
      "content": {
        "questionText": "Consider the methods used by processes P1 and P2 for accessing their critical sections whenever needed, as given below. The initial values of shared boolean variables S1 and S2 are randomly assigned. \\(\\begin{array}{|l|l|}\\hline \\textbf{Method used by P1}  &  \\textbf{Method used by P2}  \\\\ \\hline  \\text{while (S1 == S2);} & \\text{while (S1 != S2);} \\\\  \\text{Critical Section} & \\text{Critical Section} \\\\  \\text{S1 = S2;} & \\text{S2 = not(S1);} \\\\\\hline \\end{array}\\) Which one of the following statements describes the properties achieved?",
        "options": [
          {
            "id": 0,
            "text": "Mutual exclusion but not progress",
            "feedback": ""
          },
          {
            "id": 1,
            "text": "Progress but not mutual exclusion",
            "feedback": ""
          },
          {
            "id": 2,
            "text": "Neither mutual exclusion nor progress",
            "feedback": ""
          },
          {
            "id": 3,
            "text": "Both mutual exclusion and progress",
            "feedback": ""
          }
        ]
      },
      "answer": {
        "correctOption": 0,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "",
      "metadata": {
        "status": "READY_FOR_SME"
      }
    },
    {
      "questionId": 3916,
      "type": "MCQ",
      "difficulty": "BEGINNER",
      "topology": {
        "subject": null,
        "topic": null,
        "subtopic": null
      },
      "content": {
        "questionText": "What is the appropriate pairing of items in the two columns listing various activities encountered in a software li fe cycle?  P. Requirements Capture   \n\n\t\t\t Q. Design   \n\n\t\t\t R. Implementation   \n\n\t\t\t S. Maintenance   1. Module Development and Integration  \n\n\t\t\t 2. Domain Analysis  \n\n\t\t\t 3. Structural and Behavioral Modeling  \n\n\t\t\t 4. Performance Tuning",
        "options": [
          {
            "id": 0,
            "text": "P-3, Q-2,R-4,S-1",
            "feedback": ""
          },
          {
            "id": 1,
            "text": "P-2, Q-3,R-1,S-4",
            "feedback": ""
          },
          {
            "id": 2,
            "text": "P-3, Q-2,R-1,S-4",
            "feedback": ""
          },
          {
            "id": 3,
            "text": "P-2, Q-3,R-4,S-1",
            "feedback": ""
          }
        ]
      },
      "answer": {
        "correctOption": 1,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "",
      "metadata": {
        "status": "READY_FOR_SME"
      }
    },
    {
      "questionId": 3915,
      "type": "MCQ",
      "difficulty": "BEGINNER",
      "topology": {
        "subject": "Software Engineering",
        "topic": "Graph Theory",
        "subtopic": "Closure Property and Algebraic Structure"
      },
      "content": {
        "questionText": "The cyclomatic complexity of each of the modules A and B shown below is 10. What is the cyclomatic complexity of the sequential integration shown on the right hand side?",
        "options": [
          {
            "id": 0,
            "text": "19",
            "feedback": "Correct — when two modules are connected sequentially, the combined cyclomatic complexity is V(A) + V(B) - 1. Here 10 + 10 - 1 = 19 because joining the exit of the first module to the entry of the second removes one independent path."
          },
          {
            "id": 1,
            "text": "21",
            "feedback": "Incorrect — 21 corresponds to adding one extra independent path (10 + 10 + 1). Sequentially connecting modules does not add an independent path; it reduces the total by one because the connection merges a path between the modules."
          },
          {
            "id": 2,
            "text": "20",
            "feedback": "Incorrect — 20 treats the total as a simple sum (10 + 10) and ignores the effect of connecting the exit of the first module to the entry of the second. That shared connection reduces the overall cyclomatic complexity by 1, so the correct total is 19."
          },
          {
            "id": 3,
            "text": "10",
            "feedback": "Incorrect — 10 would mean the integration caused no change to complexity, which is not true when combining two modules that each have decision points. The correct combined value after a sequential connection is 19."
          }
        ]
      },
      "answer": {
        "correctOption": 0,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key insight:  when two modules are integrated sequentially, the combined cyclomatic complexity equals V(A) + V(B) - 1. Each module A and B has cyclomatic complexity 10. When you connect the exit of A to the entry of B (sequential integration), one independent path is merged, so subtract 1 from the sum. Calculation: 10 + 10 - 1 = 19 Therefore, the cyclomatic complexity of the sequential integration is 19.",
      "metadata": {
        "status": "READY_FOR_SME"
      }
    },
    {
      "questionId": 3914,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subject": "Data Base Management System",
        "topic": "Concurrency Control",
        "subtopic": "Multiple Topics"
      },
      "content": {
        "questionText": "Which of the following concurrency control protocols ensure both conflict serializability and freedom from deadlock? I. 2-phase locking II. Time-stamp ordering",
        "options": [
          {
            "id": 0,
            "text": "I only",
            "feedback": "Incorrect. Two-phase locking (2PL) enforces conflict serializability by ensuring a strict lock protocol, but it can produce deadlocks because transactions may wait on locks held by others."
          },
          {
            "id": 1,
            "text": "II only",
            "feedback": "Correct. Time-stamp ordering enforces a global ordering of conflicting operations (so schedules are conflict-serializable) and is deadlock-free because transactions do not wait for locks — conflicts are resolved by aborting/rolling back based on timestamps."
          },
          {
            "id": 2,
            "text": "Both I and II",
            "feedback": "Incorrect. While both protocols provide conflict serializability, two-phase locking can deadlock, so it does not guarantee freedom from deadlock; therefore both do not satisfy the stated requirement."
          },
          {
            "id": 3,
            "text": "Neither I nor II",
            "feedback": "Incorrect. Time-stamp ordering does ensure both conflict serializability and freedom from deadlock, so it is wrong to say neither protocol satisfies the requirements."
          }
        ]
      },
      "answer": {
        "correctOption": 1,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key insight:  we must check both conflict serializability and whether the protocol can cause deadlocks. Two-phase locking (2PL): Enforces conflict serializability by acquiring and releasing locks in two phases, but it can produce deadlocks because transactions may block waiting for locks held by others. Time-stamp ordering: Uses global timestamps to order conflicting operations, which guarantees conflict serializability. It is deadlock-free because transactions do not wait for each other; conflicts are resolved by aborting or rejecting operations based on timestamps. Conclusion: Only time-stamp ordering satisfies both conflict serializability and freedom from deadlock.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3913,
      "type": "MCQ",
      "difficulty": "ADVANCED",
      "topology": {
        "subject": "Data Base Management System",
        "topic": "SQL",
        "subtopic": "Multiple Topics"
      },
      "content": {
        "questionText": "A relational schema for a train reservation database is given below Passenger (pid, pname, age) Re servation (pid, cass, tid)  What pids are returned by the following SQL query for the above instance of the tables? \n\nSLECT pid\n\nFROM Reservation ,\n\nWHERE class ‘AC’ AND\n\n    EXISTS (SELECT *\n\n           FROM Passenger\n\n           WHERE age > 65 AND\n\n           Passenger. pid = Reservation.pid)",
        "options": [
          {
            "id": 0,
            "text": "1, 0",
            "feedback": "Incorrect. pid 0 has age 65, which does not satisfy the condition age > 65, so pid 0 is excluded. The query returns pids that have an 'AC' reservation and a matching passenger older than 65 — those are 1 and 3."
          },
          {
            "id": 1,
            "text": "1, 2",
            "feedback": "Incorrect. Although pid 2 is a passenger older than 65, pid 2's reservation shown is class 'SC', not 'AC', so it does not satisfy the class = 'AC' condition. The correct pids returned are 1 and 3."
          },
          {
            "id": 2,
            "text": "1, 3",
            "feedback": "Correct. pid 1 and pid 3 both have reservations with class 'AC' and their corresponding Passenger rows show ages greater than 65 (66 and 69 respectively). Other pids are excluded because pid 0 has age 65 (not >65), pid 2 has only 'SC' reservations, and pid 5 has an 'AC' reservation but no Passenger row to satisfy the EXISTS condition."
          },
          {
            "id": 3,
            "text": "1, 5",
            "feedback": "Incorrect. pid 5 appears in Reservation with class 'AC' but there is no Passenger row for pid 5, so the EXISTS subquery (which requires a matching Passenger with age > 65) fails. The pids that satisfy both conditions are 1 and 3."
          }
        ]
      },
      "answer": {
        "correctOption": 2,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Answer: pid 1 and pid 3. Reason: Find passengers with age > 65: pids 1 (66), 2 (67), and 3 (69). Find Reservation rows with class 'AC': pids 0, 1, 5, and 3. Take the intersection (both conditions must hold): pids 1 and 3. Notes: pid 0 is age 65 (not >65), pid 2 has only 'SC' reservations (not 'AC'), and pid 5 has an 'AC' reservation but no Passenger row to satisfy the EXISTS subquery.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3912,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subject": "Data Base Management System",
        "topic": "Indexing",
        "subtopic": "Bplus Tree Structure"
      },
      "content": {
        "questionText": "Consider a B +  -tree in which the maximum number of keys in a node is 5. What is the minimum number of keys in any non-root node?",
        "options": [
          {
            "id": 0,
            "text": "1",
            "feedback": "Incorrect. If the maximum number of keys is 5, then the maximum number of children is 6. Each non-root node must have at least half the maximum children (rounded up), so it needs at least 3 children, which means at least 2 keys. A single key (1) is too few."
          },
          {
            "id": 1,
            "text": "2",
            "feedback": "Correct. With maximum 5 keys, a node can have up to 6 children. A non-root node must have at least ceil(6/2)=3 children, so the minimum number of keys is 3-1=2."
          },
          {
            "id": 2,
            "text": "3",
            "feedback": "Incorrect. Three keys would correspond to 4 children; while some nodes may have 3 or more children, the required minimum number of keys for every non-root node is 2, not 3."
          },
          {
            "id": 3,
            "text": "4",
            "feedback": "Incorrect. Four keys would correspond to 5 children, which is above the required minimum. The minimum number of keys for a non-root node given a 5-key maximum is 2."
          }
        ]
      },
      "answer": {
        "correctOption": 1,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Answer:  2 Reasoning: Maximum number of keys in a node = 5, so the maximum number of children = 5 + 1 = 6. Every non-root node must have at least ceil(maximum children / 2) children = ceil(6 / 2) = 3 children. Minimum number of keys = minimum children - 1 = 3 - 1 = 2. Note: The root is allowed to have fewer keys, but the question asks about any non-root node.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3911,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subject": "Theory of Computation",
        "topic": "Recursively Enumerable Language",
        "subtopic": "Closure Properties REL"
      },
      "content": {
        "questionText": "Let L1 be a recursive language. Let L2 and L3 be languages that are recursively enumerable but not recursive. Which of the following statements is not necessarily true?",
        "options": [
          {
            "id": 0,
            "text": "L2 – L1 is recursively enumerable",
            "feedback": ""
          },
          {
            "id": 1,
            "text": "L1 – L3 is recursively enumerable",
            "feedback": ""
          },
          {
            "id": 2,
            "text": "L2 ∩ L1 is recursively enumerable",
            "feedback": ""
          },
          {
            "id": 3,
            "text": "L2 ∪ L1 is recursively enumerable",
            "feedback": ""
          }
        ]
      },
      "answer": {
        "correctOption": 1,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "",
      "metadata": {
        "status": "READY_FOR_SME"
      }
    },
    {
      "questionId": 3910,
      "type": "MCQ",
      "difficulty": "BEGINNER",
      "topology": {
        "subject": "Computer Networks",
        "topic": "Application Layer",
        "subtopic": "Client Server Architecture"
      },
      "content": {
        "questionText": "Which one of the following is not a client server application?",
        "options": [
          {
            "id": 0,
            "text": "Internet chat",
            "feedback": "Internet chat typically uses a client-server model: user clients connect to a chat server (or a set of servers) that relays messages, manages rooms, and stores state (examples: IRC, Slack, many web chat systems). So Internet chat is a client-server application."
          },
          {
            "id": 1,
            "text": "Web browsing",
            "feedback": "Web browsing uses the HTTP/HTTPS protocol where the web browser acts as a client requesting resources from a web server. That request–response interaction is a standard client-server pattern."
          },
          {
            "id": 2,
            "text": "E-mail",
            "feedback": "E-mail is implemented with client-server protocols (such as SMTP for sending and POP3/IMAP for retrieving). Mail clients interact with mail servers to send, receive, and store messages, so e-mail is a client-server application."
          },
          {
            "id": 3,
            "text": "Ping",
            "feedback": "Ping is a network diagnostic utility that uses the ICMP protocol (Echo Request/Reply) at the network layer to test reachability. It is not an application-layer client-server service, so Ping is not a client-server application."
          }
        ]
      },
      "answer": {
        "correctOption": 3,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Correct answer: Ping  — Ping is not a client-server application. Why Ping is not client-server: Ping uses the ICMP Echo Request/Reply at the network layer as a diagnostic tool. It is a simple host-to-host network utility, not an application-layer client that interacts with a dedicated application server. Why the others are client-server: Web browsing uses HTTP(S) where browsers request resources from web servers; e-mail uses SMTP/IMAP/POP where mail clients talk to mail servers; Internet chat systems usually have clients connecting to chat servers that route messages.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3909,
      "type": "MCQ",
      "difficulty": "BEGINNER",
      "topology": {
        "subject": "Computer Networks",
        "topic": "Network Layer - Basics & Protocols",
        "subtopic": "Time-To-Live Field in IPv4"
      },
      "content": {
        "questionText": "One of the header fields in an IP datagram is the Time to Live (TTL) field. Which of the following statements best explains the need for this field?",
        "options": [
          {
            "id": 0,
            "text": "It can be used to prioritize packets",
            "feedback": "Incorrect. The TTL field is not used to prioritize packets. Packet prioritization is handled by fields such as the Differentiated Services Code Point (DSCP) or the older TOS field. TTL limits a packet's lifetime, not its priority."
          },
          {
            "id": 1,
            "text": "It can be used to reduce delays",
            "feedback": "Incorrect. TTL does not reduce delays. It limits how long a packet can circulate in the network by counting down at each hop. Delays are affected by routing, queuing, and congestion, not by the TTL value."
          },
          {
            "id": 2,
            "text": "It can be used to optimize throughput",
            "feedback": "Incorrect. TTL does not optimize throughput. Throughput is managed by congestion control and flow control mechanisms (usually at transport layer) and by routing/queue management in the network. TTL only stops packets from living forever."
          },
          {
            "id": 3,
            "text": "It can be used to prevent packet looping",
            "feedback": "Correct. The Time to Live field prevents packets from looping indefinitely by limiting the number of hops a packet can traverse. Each router decrements the TTL; when it reaches zero, the packet is discarded (and in IPv4 an ICMP \"Time Exceeded\" message is usually sent back). In IPv6 the equivalent field is called Hop Limit."
          }
        ]
      },
      "answer": {
        "correctOption": 3,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key idea:  The TTL field limits how long a packet can remain in the network by being decremented at each hop (measured in hops). Each router that forwards the packet decreases the TTL by one. If the TTL reaches zero, the router discards the packet. Discarding packets whose TTL expired prevents packets caught in routing loops from circulating forever. In IPv4, an ICMP \"Time Exceeded\" message is typically sent to the sender when a packet is dropped for TTL expiry. IPv6 uses an equivalent field called Hop Limit. Note: TTL is not for prioritization, delay reduction, or throughput optimization—those are handled by other mechanisms (e.g., DSCP/TOS for priority, routing/queuing for delays, and transport-layer congestion control for throughput).",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3908,
      "type": "MCQ",
      "difficulty": "BEGINNER",
      "topology": {
        "subject": "Operating System",
        "topic": "Memory Management",
        "subtopic": null
      },
      "content": {
        "questionText": "Which languages necessarily need heap allocation in the runtime environment?",
        "options": [
          {
            "id": 0,
            "text": "Those that support recursion",
            "feedback": ""
          },
          {
            "id": 1,
            "text": "Those that use dynamic scoping",
            "feedback": ""
          },
          {
            "id": 2,
            "text": "Those that allow dynamic data structures",
            "feedback": ""
          },
          {
            "id": 3,
            "text": "Those that use global variables",
            "feedback": ""
          }
        ]
      },
      "answer": {
        "correctOption": 2,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "",
      "metadata": {
        "status": "READY_FOR_SME"
      }
    },
    {
      "questionId": 3907,
      "type": "MCQ",
      "difficulty": "BEGINNER",
      "topology": {
        "subject": "Compiler Design",
        "topic": "Basics of Compiler",
        "subtopic": "Symbol Table"
      },
      "content": {
        "questionText": "Which data structure in a compiler is used for managing information about variables and their attributes?",
        "options": [
          {
            "id": 0,
            "text": "Abstract syntax tree",
            "feedback": ""
          },
          {
            "id": 1,
            "text": "Symbol table",
            "feedback": ""
          },
          {
            "id": 2,
            "text": "Semantic stack",
            "feedback": ""
          },
          {
            "id": 3,
            "text": "Parse table",
            "feedback": ""
          }
        ]
      },
      "answer": {
        "correctOption": 1,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "",
      "metadata": {
        "status": "READY_FOR_SME"
      }
    },
    {
      "questionId": 3906,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subject": "Algorithm",
        "topic": "Asymptotic Notation",
        "subtopic": null
      },
      "content": {
        "questionText": "Two alternative packages A and B are available for processing a database having 10 k  records. Package A requires 0.0001n 2  time units and package B requires 10nlog 10 n time units to process n records. What is the smallest value of k for which package B will be preferred over A?",
        "options": [
          {
            "id": 0,
            "text": "12",
            "feedback": ""
          },
          {
            "id": 1,
            "text": "10",
            "feedback": ""
          },
          {
            "id": 2,
            "text": "6",
            "feedback": ""
          },
          {
            "id": 3,
            "text": "5",
            "feedback": ""
          }
        ]
      },
      "answer": {
        "correctOption": 2,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "",
      "metadata": {
        "status": "READY_FOR_SME"
      }
    },
    {
      "questionId": 3905,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subject": "C Programming",
        "topic": "Pointers",
        "subtopic": "Pointers with other Concepts"
      },
      "content": {
        "questionText": "What does the following program print? #include void f( int *p,  int *q) { p = q; *p = 2; } int i = 0, j = 1; int main() { f(&i, &j); printf ( \"%d %d \\n\" , i, j); getchar (); return 0; }",
        "options": [
          {
            "id": 0,
            "text": "2 2",
            "feedback": "Incorrect. This result (\"2 2\") would mean both i and j end up as 2. In the function the pointer parameter p is a local copy, so assigning p = q only changes the local pointer. The assignment *p = 2 updates the object p points to after the assignment (that is j), so i is not changed and remains 0."
          },
          {
            "id": 1,
            "text": "2 1",
            "feedback": "Incorrect. \"2 1\" would mean i becomes 2 and j stays 1. Initially p points to i, but the function assigns p = q (making the local p point to j) before doing *p = 2, so the assignment sets j to 2, not i. Therefore i remains 0."
          },
          {
            "id": 2,
            "text": "0 1",
            "feedback": "Incorrect. \"0 1\" would mean neither variable is changed. But the function performs *p = 2 after making the local p point to q, so j is changed to 2. Therefore the second value cannot remain 1."
          },
          {
            "id": 3,
            "text": "0 2",
            "feedback": "Correct. The function receives pointers by value: p and q are local copies of the caller's pointer values. The statement p = q makes the local p point to the same object as q (that is, j). Then *p = 2 stores 2 into j. i was never changed and stays 0, so the program prints \"0 2\"."
          }
        ]
      },
      "answer": {
        "correctOption": 3,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key idea:  pointer parameters are passed by value; assigning to the parameter changes only the local pointer, not the caller's pointer. Initial values: i = 0, j = 1. Call f(&i, &j): inside f, p is a local copy pointing to i and q points to j. The statement p = q makes the local p point to the same object as q (that is, j). Then *p = 2 stores 2 into j. i is never modified. Therefore the program prints: 0 2",
      "metadata": {
        "status": "READY_FOR_SME"
      }
    },
    {
      "questionId": 3904,
      "type": "MCQ",
      "difficulty": "BEGINNER",
      "topology": {
        "subject": "Data Structure",
        "topic": "Tree",
        "subtopic": "Binary Tree"
      },
      "content": {
        "questionText": "In a binary tree with n nodes, every node has an odd number of descendants. Every node is considered to be its own descendant. What is the number of nodes in the tree that have exactly one child?",
        "options": [
          {
            "id": 0,
            "text": "\\(0\\)",
            "feedback": ""
          },
          {
            "id": 1,
            "text": "\\(1\\)",
            "feedback": ""
          },
          {
            "id": 2,
            "text": "\\((n- 1 ) / 2\\)",
            "feedback": ""
          },
          {
            "id": 3,
            "text": "\\(n - 1\\)",
            "feedback": ""
          }
        ]
      },
      "answer": {
        "correctOption": 0,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "",
      "metadata": {
        "status": "READY_FOR_SME"
      }
    },
    {
      "questionId": 3903,
      "type": "MCQ",
      "difficulty": "ADVANCED",
      "topology": {
        "subject": "Digital Electronics",
        "topic": "Combinational Circuit",
        "subtopic": "Multiplexer"
      },
      "content": {
        "questionText": "The Boolean expression for the output  \\(f\\)  of the multiplexer shown below is",
        "options": [
          {
            "id": 0,
            "text": "\\(\\overline {P \\oplus Q \\oplus R}\\)",
            "feedback": "This is the negation of the XOR of P, Q and R. The multiplexer output is not the complement; using the select bits P and Q the MUX implements P ⊕ Q ⊕ R, not its negation. For example, when P = Q = R = 1 the MUX output is 1 but this expression would give 0, so this choice is incorrect."
          },
          {
            "id": 1,
            "text": "\\(P \\oplus Q \\oplus R\\)",
            "feedback": "Correct. With select inputs P and Q, the MUX chooses R when P and Q are equal (00 or 11) and chooses R̅ when P and Q differ (01 or 10). That makes the output equal to R ⊕ (P ⊕ Q), which by associativity of XOR is P ⊕ Q ⊕ R."
          },
          {
            "id": 2,
            "text": "\\(P+Q+R\\)",
            "feedback": "This is the OR of P, Q and R. The MUX output depends on R and R̅ selected by the pattern of P and Q, not a simple OR of the three variables. For instance, when P = Q = 1 and R = 0 the MUX output is 0 (bottom input R), but P + Q + R would be 1, so this option is incorrect."
          },
          {
            "id": 3,
            "text": "\\(\\overline{P+Q+R}\\)",
            "feedback": "This is the NOR of P, Q and R (the complement of the OR). The MUX does not implement NOR. For example, with P = Q = 1 and R = 0 the true MUX output is 0 while this expression would give 0 as well in that case, but other input combinations (e.g., P = 0, Q = 1, R = 0) differ — the MUX gives 1 while NOR would give 0. Thus this choice is incorrect."
          }
        ]
      },
      "answer": {
        "correctOption": 1,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Key idea:  the two select lines P and Q choose either R or its complement, so the output is an XOR of the three signals. Map select values to inputs: with select bits (P,Q) = 00 the top input R is chosen; 01 chooses R̅; 10 chooses R̅; 11 chooses R. Write the sum-of-products from the MUX selection: f = P'Q'R + P'QR' + PQ'R' + PQR Factor by R and R': f = R(P'Q' + PQ) + R'(P'Q + PQ') Recognize the grouped terms: P'Q' + PQ = (P ⊕ Q)' (XNOR) and P'Q + PQ' = P ⊕ Q. Thus f = R·(P ⊕ Q)' + R'·(P ⊕ Q) = R ⊕ (P ⊕ Q). Using associativity of XOR, the final simplified expression is: f = P ⊕ Q ⊕ R",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3902,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subject": "Digital Electronics",
        "topic": "Number Representation",
        "subtopic": "2's Complement"
      },
      "content": {
        "questionText": "P is a 16-bit signed integer. The 2’s complement representation of P is (F87B) 16 . The 2’s complement representation of 8*P is",
        "options": [
          {
            "id": 0,
            "text": "(C3D8) 16",
            "feedback": "Correct. Start by interpreting (F87B)16 as a 16-bit two's complement number. Invert F87B -> 0784, add 1 -> 0785 = 1925 decimal, so P = -1925. Multiply by 8: 8 * P = -15400. Convert 15400 to hex: 15400 = 0x3C28. Form the two's complement negative: invert 3C28 -> C3D7, add 1 -> C3D8. Therefore 8*P = (C3D8)16."
          },
          {
            "id": 1,
            "text": "(187B) 16",
            "feedback": "Incorrect. (187B)16 is not the two's complement representation of 8*P. The correct value is (C3D8)16. Key steps: (F87B)16 -> invert -> 0784, add 1 -> 0785 = 1925, so P = -1925. 8*P = -15400; 15400 = 0x3C28; two's complement of 3C28 is C3D8."
          },
          {
            "id": 2,
            "text": "(F878) 16",
            "feedback": "Incorrect. (F878)16 is not the representation of 8*P. Correct computation: (F87B)16 corresponds to P = -1925, so 8*P = -15400. 15400 in hex is 3C28; its two's complement is C3D8. Thus the correct 16-bit two's complement is (C3D8)16."
          },
          {
            "id": 3,
            "text": "(987B) 16",
            "feedback": "Incorrect. (987B)16 is not equal to 8*P. Work through the conversion: (F87B)16 -> magnitude 0x0785 = 1925, so P = -1925. 8*P = -15400; 15400 = 0x3C28. Two's complement of 3C28 is C3D8, so 8*P = (C3D8)16."
          }
        ]
      },
      "answer": {
        "correctOption": 0,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "Step 1: Determine the signed value of P from (F87B)16. MSB is 1, so the number is negative in two's complement. Invert F87B -> 0784; add 1 -> 0785. 0x0785 = 1925 decimal, so P = -1925. Step 2: Compute 8 * P. 8 * (-1925) = -15400. Convert magnitude 15400 to hex: 15400 = 0x3C28. Take two's complement to represent the negative value: invert 3C28 -> C3D7, add 1 -> C3D8. Answer: The 16-bit two's complement representation of 8 * P is (C3D8)16. Note: The result fits within the 16-bit signed range (-32768 to 32767), so there is no overflow.",
      "metadata": {
        "status": "PUBLISHED"
      }
    },
    {
      "questionId": 3901,
      "type": "MCQ",
      "difficulty": "INTERMEDIATE",
      "topology": {
        "subject": "COA",
        "topic": "Memory Management",
        "subtopic": "Basic of Memory Organisation"
      },
      "content": {
        "questionText": "A main memory unit with a capacity of 4 megabytes is built using 1M×1-bit DRAM chips. Each DRAM chip has 1K rows of cells with 1K cells in each row. The time taken for a single refresh operation is 100 nanoseconds. The time required to perform one refresh operation on all the cells in the memory unit is",
        "options": [
          {
            "id": 0,
            "text": "100 nanoseconds",
            "feedback": ""
          },
          {
            "id": 1,
            "text": "100×2 10  nanoseconds",
            "feedback": ""
          },
          {
            "id": 2,
            "text": "100×2 20  nanoseconds",
            "feedback": ""
          },
          {
            "id": 3,
            "text": "3200×2 20  nanoseconds",
            "feedback": ""
          }
        ]
      },
      "answer": {
        "correctOption": 1,
        "correctOptions": [],
        "range": null,
        "acceptedAnswers": [],
        "caseSensitive": false
      },
      "solution": "",
      "metadata": {
        "status": "READY_FOR_SME"
      }
    }
  ]
}